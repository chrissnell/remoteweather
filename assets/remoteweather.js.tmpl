let humidityChart, temperatureChart, barometerChart, windspeedChart, winddirectionChart, rainfallChart, solarwattsChart, voltageChart;
let dataRefresherTimer, windDataRefresherTimer, forecastRefresherTimer;
let secondsSinceForecastRefreshed, forecastLastRefreshedElement;

let forecastTabList = {
    "week": {
        "periodDivPrefix": "week",
        "elementIdVal": "forecast-tab-week",
        "spanHours": 168
    }
}

let chartTabList = {
    "day": {
        "graphDivSuffix": "24Hour",
        "elementIdVal": "tab-day",
        "spanHours": 24
    },
    "threedays": {
        "graphDivSuffix": "72Hours",
        "elementIdVal": "tab-threedays",
        "spanHours": 72
    },
    "week": {
        "graphDivSuffix": "Week",
        "elementIdVal": "tab-week",
        "spanHours": 168
    },
    "month": {
        "graphDivSuffix": "Month",
        "elementIdVal": "tab-month",
        "spanHours": 744
    },
    "year": {
        "graphDivSuffix": "Year",
        "elementIdVal": "tab-year",
        "spanHours": 8928
    }
}

let chartList = {
    "temperature":
    {
        "chart": temperatureChart,
        "divId": "temperatureChart",
        "title": "Outside Temperature",
        "yAxisLabel": "Degrees F",
        "chartType": "spline",
        "pointName": "outsideTempPoint",
        "initialSeries": [],
        "rendered": false

    },
    "humidity":
    {
        "chart": humidityChart,
        "divId": "humidityChart",
        "title": "Humidity",
        "yAxisLabel": "Percent",
        "chartType": "spline",
        "pointName": "outsideHumidityPoint",
        "initialSeries": [],
        "rendered": false
    },
    "barometer":
    {
        "chart": barometerChart,
        "divId": "barometerChart",
        "title": "Barometer",
        "yAxisLabel": "inches Hg",
        "chartType": "spline",
        "pointName": "barometerPoint",
        "initialSeries": [],
        "rendered": false
    },
    "windspeed":
    {
        "chart": windspeedChart,
        "divId": "windspeedChart",
        "title": "Wind Speed",
        "yAxisLabel": "MPH",
        "chartType": "spline",
        "pointName": "windSpeedPoint",
        "initialSeries": [],
        "rendered": false
    },
    "winddirection":
    {
        "chart": winddirectionChart,
        "divId": "winddirectionChart",
        "title": "Wind Direction",
        "yAxisLabel": "",
        "chartType": "vector",
        "pointName": "windDirectionVectorPoint",
        "initialSeries": [],
        "rendered": false
    },
    "rainfall":
    {
        "chart": rainfallChart,
        "divId": "rainfallChart",
        "title": "Rainfall",
        "yAxisLabel": "Inches",
        "chartType": "spline",
        "pointName": "rainfallPoint",
        "initialSeries": [],
        "rendered": false
    },
    "solarwatts":
    {
        "chart": solarwattsChart,
        "divId": "solarwattsChart",
        "title": "Solar Energy",
        "yAxisLabel": "Watts/m&sup2;",
        "chartType": "spline",
        "pointName": "solarWattsPoint",
        "initialSeries": [],
        "rendered": false
    },
    "voltage":
    {
        "chart": voltageChart,
        "divId": "voltageChart",
        "title": "Station Battery Voltage",
        "yAxisLabel": "Volts",
        "chartType": "spline",
        "pointName": "voltagePoint",
        "initialSeries": [],
        "rendered": false
    },
}

document.addEventListener('DOMContentLoaded', function () {
    forecastLastRefreshedElement = document.getElementById('observations-last-updated')
    fetchAndCreateCharts("day");
    for (let key in chartTabList) {
        var e = document.getElementById(chartTabList[key].elementIdVal);
        e.addEventListener("click", function (e) {
            clearCharts();
            fetchAndCreateCharts(key)
        })
    }
    refreshLiveReadings();
    refreshWeekForecastData();
    refreshDayForecastData();
    setInterval(incrementObservationTimer, 1000);
});

function incrementObservationTimer() {
    secondsSinceForecastRefreshed++;
    forecastLastRefreshedElement.innerHTML = "Last refreshed " + secondsSinceForecastRefreshed + "s ago"
}


function clearCharts(element) {
    console.log("stopping data refresher---> ", dataRefresherTimer, windDataRefresherTimer)
    clearTimeout(dataRefresherTimer);
    clearTimeout(windDataRefresherTimer);
    console.log("clearing charts...")
    for (let key in chartList) {
        chartList[key].chart = {};
        chartList[key].initialSeries = [];
    }
}

async function fetchAndCreateCharts(tabKey) {
    const result = await fetch('/span/' + chartTabList[tabKey].spanHours + 'h?station={{ .PullFromDevice }}');
    if (result.ok) {
        console.log(chartTabList[tabKey].spanHours, "of data fetched for", chartTabList[tabKey].graphDivSuffix)
        const data = await result.json();
        var count = 0;
        modVal = (data.length / 50).toFixed(0)
        data.forEach(function (item, index) {
            d = item.ts;
            chartList.temperature.initialSeries.push([d, item.otemp]);
            chartList.humidity.initialSeries.push([d, item.outhumidity]);
            chartList.barometer.initialSeries.push([d, item.bar]);
            chartList.windspeed.initialSeries.push([d, item.winds]);
            chartList.rainfall.initialSeries.push([d, item.rainincremental]);
            chartList.voltage.initialSeries.push([d, item.stationbatteryvoltage]);
            chartList.solarwatts.initialSeries.push([d, item.solarwatts]);
            if ((count % modVal) == 0) {
                chartList.winddirection.initialSeries.push([d, 5, item.winds, item.windd]);
            }
            count++;
        });
        for (let key in chartList) {
            chartElement = document.getElementById(chartList[key].divId + chartTabList[tabKey].graphDivSuffix);
            switch (chartList[key].chartType) {
                case "spline":
                    chartList[key].chart = singleVariableChart(key, chartElement, chartList[key].initialSeries, chartList[key].title, chartList[key].yAxisLabel);
                    break;
                case "vector":
                    chartList[key].chart = windVectorChart(key, chartElement, chartList[key].initialSeries, chartList[key].title);
            }
        }
        refreshData();
        refreshWindDirectionData();
        console.log('DOM fully loaded and parsed');
    }
}

/**
 * Marks a chart as rendered and ready for periodic data refreshment
 */
async function markAsRendered(chart) {
    chartList[chart].rendered = true
}

/**
* Refresh data from the server, add it to the graph and set a timeout to request again
*/
async function refreshData() {
    console.log("Fetching latest data...")
    const result = await fetch('/latest?station={{ .PullFromDevice }}');
    if (result.ok) {
        const data = await result.json();
        const ts = data.ts;
        var points = {
            "outsideTempPoint": [ts, data.otemp],
            "outsideHumidityPoint": [ts, data.outhumidity],
            "barometerPoint": [ts, data.bar],
            "windSpeedPoint": [ts, data.winds],
            // "windDirectionVectorPoint": [ts, 5, data.winds, data.windd],
            "voltagePoint": [ts, data.stationbatteryvoltage],
            "rainfallPoint": [ts, data.dayrain],
            "solarWattsPoint": [ts, data.solarwatts]
        }

        for (let key in chartList) {
            // The wind direction chart is a special one requiring its own updating
            // procedure, so we skip it here.
            if ((key != "winddirection") && (chartList[key].rendered == true)) {
                console.log("adding data point to", key)
                const series = chartList[key].chart.series[0]
                shift = series.data.length > 20;
                chartList[key].chart.series[0].addPoint(points[chartList[key].pointName]);
            }
        }

    }
    dataRefresherTimer = setTimeout(refreshData, 300000);
}

async function refreshWindDirectionData() {
    console.log("Fetching latest wind direction data...")
    const result = await fetch('/latest?station={{ .PullFromDevice }}');
    if (result.ok) {
        const data = await result.json();
        const ts = data.ts;
        var windDirectionPoint = [ts, 5, data.winds, data.windd]
        if (chartList.winddirection.rendered == true) {
            console.log("adding data point to winddirection")
            const series = chartList.winddirection.chart.series[0]
            shift = series.data.length > 20;
            chartList.winddirection.chart.series[0].addPoint(windDirectionPoint);
        }

    }
    windDataRefresherTimer = setTimeout(refreshData, 1800000);
}

/**
 * Refreshes the live weather readings at the top of the page every 3 seconds
 */
async function refreshLiveReadings() {
    console.log("Fetching live data...")
    const result = await fetch('/latest?station={{ .PullFromDevice }}');
    if (result.ok) {
        const data = await result.json();
        const ts = data.ts;

        document.getElementById("rdg-temperature").innerHTML = data.otemp.toFixed(2) + '&deg;';
        document.getElementById("rdg-humidity").innerHTML = data.outhumidity.toFixed(0);
        document.getElementById("rdg-barometer").innerHTML = data.bar.toFixed(2);
        document.getElementById("rdg-windspeed").innerHTML = data.winds.toFixed(0);
        document.getElementById("rdg-winddir-cardinal").innerHTML = data.windcard;
        document.getElementById("rdg-winddir").style.transform = 'rotate(' + data.windd + 'deg)';
        document.getElementById("rdg-combined-windspeed").innerHTML = data.winds.toFixed(0)
        document.getElementById("rdg-combined-cardinal").innerHTML = data.windcard;
        document.getElementById("rdg-rainfall").innerHTML = data.dayrain.toFixed(2);
    }
    secondsSinceForecastRefreshed = 0;
    setTimeout(refreshLiveReadings, 3000);
}

async function refreshWeekForecastData() {
    console.log("Fetching week forecast data...");
    const result = await fetch('/forecast/168');
    if (result.ok) {
        const data = await result.json();
        console.log(data)

        dayToDayName = {
            0: "Sunday",
            1: "Monday",
            2: "Tuesday",
            3: "Wednesday",
            4: "Thursday",
            5: "Friday",
            6: "Saturday",
            7: "Sunday"
        }

        let i = 0;
        for (const interval of data.data) {
            let intervalDate = new Date(interval.dateTimeISO)
            let dateLabel;
            if (i == 0) {
                dateLabel = "Today"
            } else {
                dateLabel = dayToDayName[intervalDate.getDay()];
            }
            document.getElementById('week-forecast-interval-' + i + '-title').innerHTML = dateLabel;
            document.getElementById('week-forecast-interval-' + i + '-high-temp').innerHTML = interval.maxTempF;
            document.getElementById('week-forecast-interval-' + i + '-low-temp').innerHTML = interval.minTempF;
            document.getElementById('week-forecast-interval-' + i + '-icon').innerHTML = interval.weatherIcon;
            document.getElementById('week-forecast-interval-' + i + '-weather').innerHTML = interval.compactWeather;

            // Test to see if snow or rain is in the forecast
            // See: https://www.aerisweather.com/support/docs/api/reference/weather-codes/
            const snowRegex = /.*:.*:(S|SW|SI|RS|WM|BS)$/g;
            snow = snowRegex.test(interval.weatherPrimaryCoded);
            const rainRegex = /.*:.*:(R|RW|T|TO|UP|ZR|L|BY|ZY|ZR)$/g;
            rain = rainRegex.test(interval.weatherPrimaryCoded);

            if (snow) {
                console.log("snow: ", interval.snowIN);
                document.getElementById('week-forecast-interval-' + i + '-precip-icon').innerHTML = "❄";
                document.getElementById('week-forecast-interval-' + i + '-precip').innerHTML = interval.snowIN + "\"";
            } else if (rain) {
                console.log("rain: ", interval.precipIN);
                document.getElementById('week-forecast-interval-' + i + '-precip-icon').innerHTML = "⛆";
                document.getElementById('week-forecast-interval-' + i + '-precip').innerHTML = interval.precipIN + "\"";
            } else {
                console.log("no precips");
                document.getElementById('week-forecast-interval-' + i + '-precip-icon').innerHTML = "";
                document.getElementById('week-forecast-interval-' + i + '-precip').innerHTML = "";
            }
            i++;
        }


        const lastUpdated = moment(data.lastUpdated,"YYYY-MM-DD HH:mm:ss.SSSSSS-ZZ").format("h:mm A, DD MMM YYYY");

        document.getElementById('forecast-week-last-updated').innerHTML = "Last Updated: " + lastUpdated;

        // Refresh every 4 hours
        setTimeout(refreshWeekForecastData, 1000 * 60 * 60 * 4);    
    }
}


async function refreshDayForecastData() {
    console.log("Fetching day forecast data...");
    const result = await fetch('/forecast/24');
    if (result.ok) {
        const data = await result.json();
        console.log(data)

        dayToDayName = {
            0: "Sun",
            1: "Mon",
            2: "Tue",
            3: "Wed",
            4: "Thu",
            5: "Fri",
            6: "Sat",
            7: "Sun"
        }

        let pixelsPerDegree = 0;
        const tempSpreadPixels = 70;
        avgTemps = data.data.map((x) => x.avgTempF);
        lowTemp = Math.min.apply(null, avgTemps);
        highTemp = Math.max.apply(null, avgTemps);
        tempSpread = highTemp - lowTemp;
        if (tempSpread > 0) {
            pixelsPerDegree = tempSpreadPixels / tempSpread;
        }

        let i = 0;
        for (const interval of data.data) {
            let dateLabel;

            let intervalDate = moment(interval.dateTimeISO,"YYYY-MM-DD HH:mm:ss.SSSSSS-ZZ");

            if (intervalDate.hour() == 0 || i == 0) {
                dateLabel = intervalDate.format("h A[<BR>]ddd");
            } else {
                dateLabel = intervalDate.format("h A");
            }
            document.getElementById('day-forecast-interval-' + i + '-title').innerHTML = dateLabel;
            document.getElementById('day-forecast-interval-' + i + '-avg-temp').innerHTML = interval.avgTempF + "&deg;";
            document.getElementById('day-forecast-interval-' + i + '-icon').innerHTML = interval.weatherIcon;

            document.getElementById('day-forecast-interval-' + i + '-adjustable-div').style.paddingTop = pixelsPerDegree * (highTemp - interval.avgTempF) + "px";

            // Test to see if snow or rain is in the forecast
            // See: https://www.aerisweather.com/support/docs/api/reference/weather-codes/
            const snowRegex = /.*:.*:(S|SW|SI|RS|WM|BS)$/g;
            snow = snowRegex.test(interval.weatherPrimaryCoded);
            const rainRegex = /.*:.*:(R|RW|T|TO|UP|ZR|L|BY|ZY|ZR)$/g;
            rain = rainRegex.test(interval.weatherPrimaryCoded);

            if (snow) {
                console.log("snow: ", interval.snowIN);
                document.getElementById('day-forecast-interval-' + i + '-precip-icon').innerHTML = "❄";
                document.getElementById('day-forecast-interval-' + i + '-precip').innerHTML = interval.snowIN + "\"";
            } else if (rain) {
                console.log("rain: ", interval.precipIN);
                document.getElementById('day-forecast-interval-' + i + '-precip-icon').innerHTML = "⛆";
                document.getElementById('day-forecast-interval-' + i + '-precip').innerHTML = interval.precipIN + "\"";
            } else {
                console.log("no precips");
                document.getElementById('day-forecast-interval-' + i + '-precip-icon').innerHTML = "";
                document.getElementById('day-forecast-interval-' + i + '-precip').innerHTML = interval.pop + "%";
            }
            i++;
        }


        const lastUpdated = moment(data.lastUpdated,"YYYY-MM-DD HH:mm:ss.SSSSSS-ZZ").format("h:mm A, DD MMM YYYY");

        document.getElementById('forecast-day-last-updated').innerHTML = "Last Updated: " + lastUpdated;

        // Refresh every 4 hours
        setTimeout(refreshDayForecastData, 1000 * 60 * 60 * 4);    
    }
}




function windVectorChart(chartName, targetDiv, data, title) {
    Highcharts.Templating.helpers.date = function (value) {
        const d = new Date(value);
        return d.toLocaleString('en-US');
    };

    thisChart = Highcharts.chart(targetDiv, {
        legend: {
            enabled: false
        },
        chart: {
            displayErrors: true,
            style: {
                fontFamily: 'Inconsolata, monospace'
            },
            events: {
                load: function () {
                    markAsRendered(chartName);
                }
            }
        },
        tooltip: {
            pointFormat: '{date point.x}<br/>Speed: <b>{(point.length):.1f} MPH</b><br/>Direction: <b>{(point.direction):.0f}\u00B0</b><br/>'
        },
        title: {
            text: title
        },
        credits: {
            enabled: false
        },
        xAxis: {
            gridLineWidth: 1,
            type: 'datetime',
            dateTimeLabelFormats : {
                hour: '%l %p',
                minute: '%I:%M %p'
            }
        },
        yAxis: {
            visible: false,
        },
        time: {
            useUTC: false
        },
        series: [{
            type: 'vector',
            name: title,
            color: '#c1121f',
            data: data
        }]

    });
    return thisChart;
}

function singleVariableChart(chartName, targetDiv, data, title, yAxisTitle) {
    thisChart = Highcharts.chart(targetDiv, {
        legend: {
            enabled: false
        },
        chart: {
            displayErrors: true,
            type: 'spline',
            style: {
                fontFamily: 'Inconsolata, monospace'
            },
            events: {
                // load: requestData
                load: function () {
                    markAsRendered(chartName);
                }
            }
        },

        credits: {
            enabled: false
        },

        rangeSelector: {
            selected: 1
        },

        yAxis: {
            title: {
                text: yAxisTitle
            }
        },

        xAxis: {
            title: {
                enabled: true,
            },
            type: 'datetime',
            dateTimeLabelFormats : {
                hour: '%l %p',
                minute: '%I:%M %p'
            }
        },

        title: {
            text: title
        },

        time: {
            useUTC: false
        },

        series: [{
            name: title,
            data: data,
            color: '#c1121f',
            tooltip: {
                valueDecimals: 2
            },
            states: {
                hover: {
                    lineWidth: 2
                }
            }
        }]
    });
    return thisChart;
}

