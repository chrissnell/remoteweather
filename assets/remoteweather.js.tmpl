// Global chart objects
let humidityChart, temperatureChart, barometerChart, snowdepthChart, windspeedChart, 
    winddirectionChart, rainfallChart, solarwattsChart, voltageChart;

// Timer variables
let dataRefresherTimer, windDataRefresherTimer, liveReadingsTimer, weekForecastTimer, dayForecastTimer;
let secondsSinceForecastRefreshed, forecastLastRefreshedElement;

// Constants for maintainability
const MAX_POINTS = 20;
const DATA_REFRESH_INTERVAL = 300000; // 5 minutes
const WIND_DATA_REFRESH_INTERVAL = 1800000; // 30 minutes
const LIVE_READINGS_REFRESH_INTERVAL = 3000; // 3 seconds
const FORECAST_REFRESH_INTERVAL = 1000 * 60 * 60 * 4; // 4 hours
const INACTIVE_THRESHOLD = 1000 * 60 * 5; // 5 minutes for testing; adjust as needed
const DEBOUNCE_DELAY = 500; // 500ms debounce for visibility changes

// Debug flag based on URL
const debug = new URLSearchParams(window.location.search).get('debug') === '1';

// Track last refresh times for charts and tab inactivity
let lastChartRefreshTimes = {};
let lastVisibleTime = Date.now();
let visibilityAbortController = null;

// Forecast tab configuration
let forecastTabList = {
    "week": {
        "periodDivPrefix": "week",
        "elementIdVal": "forecast-tab-week",
        "spanHours": 168
    }
};

// Chart tab configuration
let chartTabList = {
    "day": {
        "graphDivSuffix": "24Hour",
        "elementIdVal": "tab-day",
        "spanHours": 24
    },
    "threedays": {
        "graphDivSuffix": "72Hours",
        "elementIdVal": "tab-threedays",
        "spanHours": 72
    },
    "week": {
        "graphDivSuffix": "Week",
        "elementIdVal": "tab-week",
        "spanHours": 168
    },
    "month": {
        "graphDivSuffix": "Month",
        "elementIdVal": "tab-month",
        "spanHours": 744
    },
    "year": {
        "graphDivSuffix": "Year",
        "elementIdVal": "tab-year",
        "spanHours": 8928
    }
};

// Chart configuration object
let chartList = {
    "temperature": {
        "chart": temperatureChart,
        "divId": "temperatureChart",
        "title": "Outside Temperature",
        "yAxisLabel": "Degrees F",
        "chartType": "spline",
        "pointName": "outsideTempPoint",
        "initialSeries": [],
        "rendered": false
    },
    "humidity": {
        "chart": humidityChart,
        "divId": "humidityChart",
        "title": "Humidity",
        "yAxisLabel": "Percent",
        "chartType": "spline",
        "pointName": "outsideHumidityPoint",
        "initialSeries": [],
        "rendered": false
    },
    "snowdepth": {
        "chart": snowdepthChart,
        "divId": "snowdepthChart",
        "title": "Snow Depth",
        "yAxisLabel": "inches",
        "chartType": "spline",
        "pointName": "snowdepthPoint",
        "initialSeries": [],
        "rendered": false
    },
    "barometer": {
        "chart": barometerChart,
        "divId": "barometerChart",
        "title": "Barometer",
        "yAxisLabel": "inches Hg",
        "chartType": "spline",
        "pointName": "barometerPoint",
        "initialSeries": [],
        "rendered": false
    },
    "windspeed": {
        "chart": windspeedChart,
        "divId": "windspeedChart",
        "title": "Wind Speed",
        "yAxisLabel": "MPH",
        "chartType": "spline",
        "pointName": "windSpeedPoint",
        "initialSeries": [],
        "rendered": false
    },
    "winddirection": {
        "chart": winddirectionChart,
        "divId": "winddirectionChart",
        "title": "Wind Direction",
        "yAxisLabel": "",
        "chartType": "vector",
        "pointName": "windDirectionVectorPoint",
        "initialSeries": [],
        "rendered": false
    },
    "rainfall": {
        "chart": rainfallChart,
        "divId": "rainfallChart",
        "title": "Rainfall",
        "yAxisLabel": "Inches",
        "chartType": "spline",
        "pointName": "rainfallPoint",
        "initialSeries": [],
        "rendered": false
    },
    "solarwatts": {
        "chart": solarwattsChart,
        "divId": "solarwattsChart",
        "title": "Solar Energy",
        "yAxisLabel": "Watts/mÂ²",
        "chartType": "spline",
        "pointName": "solarWattsPoint",
        "initialSeries": [],
        "rendered": false
    },
    "voltage": {
        "chart": voltageChart,
        "divId": "voltageChart",
        "title": "Station Battery Voltage",
        "yAxisLabel": "Volts",
        "chartType": "spline",
        "pointName": "voltagePoint",
        "initialSeries": [],
        "rendered": false
    }
};

// Initialize on DOM content loaded
document.addEventListener('DOMContentLoaded', function () {
    forecastLastRefreshedElement = document.getElementById('observations-last-updated');
    fetchAndCreateCharts("day");
    for (let key in chartTabList) {
        const element = document.getElementById(chartTabList[key].elementIdVal);
        element.addEventListener("click", function () {
            clearCharts();
            fetchAndCreateCharts(key);
        });
    }
    refreshLiveReadings();
    refreshWeekForecastData();
    refreshDayForecastData();
    setInterval(incrementObservationTimer, 1000);

    // Handle tab visibility changes with debounce
    document.addEventListener('visibilitychange', debounce(handleVisibilityChange, DEBOUNCE_DELAY));
});

// Increment timer for last refreshed display
function incrementObservationTimer() {
    if (!document.hidden) {
        secondsSinceForecastRefreshed++;
        forecastLastRefreshedElement.innerHTML = "Last refreshed " + secondsSinceForecastRefreshed + "s ago";
    }
}

// Clear charts and timers
function clearCharts() {
    clearTimeout(dataRefresherTimer);
    clearTimeout(windDataRefresherTimer);
    clearTimeout(liveReadingsTimer);
    clearTimeout(weekForecastTimer);
    clearTimeout(dayForecastTimer);
    if (visibilityAbortController) {
        visibilityAbortController.abort();
        visibilityAbortController = null;
    }
    for (let key in chartList) {
        chartList[key].chart = {};
        chartList[key].initialSeries = [];
        chartList[key].rendered = false;
    }
}

// Fetch data for a given duration and station with abort support
async function fetchData(duration, station) {
    if (visibilityAbortController) visibilityAbortController.abort(); // Cancel previous fetch if active
    visibilityAbortController = new AbortController();
    try {
        const response = await fetch(`/span/${duration}?station=${station}`, { signal: visibilityAbortController.signal });
        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
        return response.json();
    } catch (error) {
        if (error.name === 'AbortError') {
            if (debug) console.log(`Fetch aborted for duration ${duration}`);
            return null;
        }
        if (debug) console.error(`Failed to fetch data for duration ${duration}:`, error);
        return null;
    }
}

// Process fetched data into chart series
function processData(data, chartList, updateExisting = false) {
    if (!data) return;
    const modVal = Math.floor(data.length / 50);
    data.forEach((item, index) => {
        const ts = item.ts;
        if (updateExisting) {
            if (chartList.temperature.chart.series) chartList.temperature.chart.series[0].addPoint([ts, item.otemp], false);
            if (chartList.humidity.chart.series) chartList.humidity.chart.series[0].addPoint([ts, item.outhumidity], false);
            if (chartList.barometer.chart.series) chartList.barometer.chart.series[0].addPoint([ts, item.bar], false);
            if (chartList.windspeed.chart.series) chartList.windspeed.chart.series[0].addPoint([ts, item.winds], false);
            if (chartList.rainfall.chart.series) chartList.rainfall.chart.series[0].addPoint([ts, item.rainincremental], false);
            if (chartList.voltage.chart.series) chartList.voltage.chart.series[0].addPoint([ts, item.stationbatteryvoltage], false);
            if (chartList.solarwatts.chart.series) chartList.solarwatts.chart.series[0].addPoint([ts, item.solarwatts], false);
            if ((index % modVal === 0 || data.length < 50) && chartList.winddirection.chart.series) {
                chartList.winddirection.chart.series[0].addPoint([ts, 5, item.winds, item.windd], false);
            }
        } else {
            chartList.temperature.initialSeries.push([ts, item.otemp]);
            chartList.humidity.initialSeries.push([ts, item.outhumidity]);
            chartList.barometer.initialSeries.push([ts, item.bar]);
            chartList.windspeed.initialSeries.push([ts, item.winds]);
            chartList.rainfall.initialSeries.push([ts, item.rainincremental]);
            chartList.voltage.initialSeries.push([ts, item.stationbatteryvoltage]);
            chartList.solarwatts.initialSeries.push([ts, item.solarwatts]);
            if (index % modVal === 0 || data.length < 50) {
                chartList.winddirection.initialSeries.push([ts, 5, item.winds, item.windd]);
            }
        }
    });
    if (updateExisting) {
        for (let key in chartList) {
            if (chartList[key].chart.series) chartList[key].chart.redraw();
        }
    }
}

// Create charts for all metrics
function createCharts(tabKey, chartList) {
    for (let key in chartList) {
        const chartElement = document.getElementById(`${chartList[key].divId}${chartTabList[tabKey].graphDivSuffix}`);
        const options = {
            yAxisTitle: chartList[key].yAxisLabel,
            chartType: chartList[key].chartType,
            tooltipFormat: chartList[key].chartType === 'vector' ? {
                pointFormat: '{date point.x}<br/>Speed: <b>{point.length:.1f} MPH</b><br/>Direction: <b>{point.direction:.0f}\u00B0</b>'
            } : { valueDecimals: 2 }
        };
        chartList[key].chart = createChart(key, chartElement, chartList[key].initialSeries, chartList[key].title, options);
        lastChartRefreshTimes[key] = Date.now();
    }
}

// Fetch data and create charts for a tab
async function fetchAndCreateCharts(tabKey) {
    const data = await fetchData(`${chartTabList[tabKey].spanHours}h`, '{{ .PullFromDevice }}');
    if (!data) return;
    processData(data, chartList);
    createCharts(tabKey, chartList);

    {{- if .SnowDevice }}
    const snowData = await fetchData(`${chartTabList[tabKey].spanHours}h`, '{{ .SnowDevice }}');
    if (snowData) {
        snowData.forEach(item => {
            chartList.snowdepth.initialSeries.push([item.ts, item.snowdepth]);
        });
        const snowChartElement = document.getElementById(`${chartList.snowdepth.divId}${chartTabList[tabKey].graphDivSuffix}`);
        chartList.snowdepth.chart = createChart('snowdepth', snowChartElement, chartList.snowdepth.initialSeries, chartList.snowdepth.title, {
            yAxisTitle: chartList.snowdepth.yAxisLabel,
            chartType: chartList.snowdepth.chartType,
            tooltipFormat: { valueDecimals: 2 }
        });
        lastChartRefreshTimes['snowdepth'] = Date.now();
    }
    {{- end }}

    refreshData();
    refreshWindDirectionData();
}

// Fetch the latest general weather data
async function fetchLatestData(station) {
    try {
        const response = await fetch(`/latest?station=${station}`);
        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
        return response.json();
    } catch (error) {
        if (debug) console.error(`Failed to fetch latest data for station ${station}:`, error);
        return null;
    }
}

// Fetch the latest snow data
async function fetchSnowData(station) {
    try {
        const response = await fetch(`/snow?station=${station}`);
        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
        return response.json();
    } catch (error) {
        if (debug) console.error(`Failed to fetch snow data for station ${station}:`, error);
        return null;
    }
}

// Update a chart's series with a new point
function updateChartSeries(chart, point, maxPoints = MAX_POINTS) {
    if (!chart.rendered) return;
    const series = chart.chart.series[0];
    const shift = series.data.length > maxPoints;
    series.addPoint(point, true, shift);
    lastChartRefreshTimes[chart.pointName] = Date.now();
}

// Refresh chart data periodically
async function refreshData() {
    if (document.hidden) return;
    clearTimeout(dataRefresherTimer);
    const data = await fetchLatestData('{{ .PullFromDevice }}');
    if (!data) return;
    const points = {
        outsideTempPoint: [data.ts, data.otemp],
        outsideHumidityPoint: [data.ts, data.outhumidity],
        barometerPoint: [data.ts, data.bar],
        windSpeedPoint: [data.ts, data.winds],
        voltagePoint: [data.ts, data.stationbatteryvoltage],
        rainfallPoint: [data.ts, data.dayrain],
        solarWattsPoint: [data.ts, data.solarwatts]
    };
    for (let key in chartList) {
        if (key !== 'winddirection' && chartList[key].rendered) {
            updateChartSeries(chartList[key], points[chartList[key].pointName]);
        }
    }
    {{- if .SnowDevice }}
    const snowData = await fetchSnowData('{{ .SnowDevice }}');
    if (snowData) {
        if (debug) console.log('Snow data received:', snowData);
        const snowPoint = [snowData.ts, snowData.snowdepth];
        updateChartSeries(chartList.snowdepth, snowPoint);
    }
    {{- end }}
    dataRefresherTimer = setTimeout(refreshData, DATA_REFRESH_INTERVAL);
}

// Refresh wind direction data periodically
async function refreshWindDirectionData() {
    if (document.hidden) return;
    clearTimeout(windDataRefresherTimer);
    const data = await fetchLatestData('{{ .PullFromDevice }}');
    if (data && chartList.winddirection.rendered) {
        const windDirectionPoint = [data.ts, 5, data.winds, data.windd];
        updateChartSeries(chartList.winddirection, windDirectionPoint);
    }
    windDataRefresherTimer = setTimeout(refreshWindDirectionData, WIND_DATA_REFRESH_INTERVAL);
}

// Update DOM element only if value changed
function updateIfChanged(elementId, newValue) {
    const element = document.getElementById(elementId);
    if (element) {
        if (element.innerHTML !== newValue) {
            element.innerHTML = newValue;
        }
    } else if (debug) {
        console.warn(`Element not found: ${elementId}`);
    }
}

// Refresh live readings periodically
async function refreshLiveReadings() {
    if (document.hidden) return;
    clearTimeout(liveReadingsTimer);
    const data = await fetchLatestData('{{ .PullFromDevice }}');
    if (data) {
        updateIfChanged('rdg-temperature', data.otemp.toFixed(2) + 'Â°');
        updateIfChanged('rdg-humidity', data.outhumidity.toFixed(0));
        updateIfChanged('rdg-barometer', data.bar.toFixed(2));
        updateIfChanged('rdg-windspeed', data.winds.toFixed(0));
        updateIfChanged('rdg-winddir-cardinal', data.windcard);
        const windDirElement = document.getElementById('rdg-winddir');
        if (windDirElement) windDirElement.style.transform = `rotate(${data.windd}deg)`;
        updateIfChanged('rdg-combined-windspeed', data.winds.toFixed(0));
        updateIfChanged('rdg-combined-cardinal', data.windcard);
        updateIfChanged('rdg-rainfall', data.dayrain.toFixed(2));
    } else if (debug) {
        console.warn('No data received from {{ .PullFromDevice }}');
    }

    {{- if .SnowDevice }}
    const snowData = await fetchSnowData('{{ .SnowDevice }}');
    if (snowData) {
        if (debug) console.log('Snow data received:', snowData);
        updateIfChanged('rdg-snow-depth', snowData.snowdepth?.toFixed(2) ?? 'N/A');
        updateIfChanged('rdg-snow-since-midnight', snowData.snowtoday?.toFixed(2) ?? 'N/A');
        updateIfChanged('rdg-snow-last-24h', snowData.snowlast24?.toFixed(2) ?? 'N/A');
        updateIfChanged('rdg-snow-last-72h', snowData.snowlast72?.toFixed(2) ?? 'N/A');
        updateIfChanged('rdg-snow-season', snowData.snowdepth ? (parseFloat(snowData.snowdepth) + 51).toFixed(2) : 'N/A');
    } else if (debug) {
        console.warn('No snow data received from {{ .SnowDevice }}');
    }
    {{- end }}

    secondsSinceForecastRefreshed = 0;
    liveReadingsTimer = setTimeout(refreshLiveReadings, LIVE_READINGS_REFRESH_INTERVAL);
}

// Refresh week forecast data
async function refreshWeekForecastData() {
    if (document.hidden) return;
    clearTimeout(weekForecastTimer);
    if (debug) console.log("Fetching week forecast data...");
    try {
        const response = await fetch('/forecast/168');
        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
        const data = await response.json();
        if (debug) console.log("Week forecast data received:", data);

        const dayToDayName = {
            0: "Sunday",
            1: "Monday",
            2: "Tuesday",
            3: "Wednesday",
            4: "Thursday",
            5: "Friday",
            6: "Saturday",
            7: "Sunday"
        };

        let i = 0;
        for (const interval of data.data) {
            let intervalDate = new Date(interval.dateTimeISO);
            let dateLabel;
            if (i === 0) {
                dateLabel = "Today";
            } else {
                dateLabel = dayToDayName[intervalDate.getDay()];
            }
            updateIfChanged(`week-forecast-interval-${i}-title`, dateLabel);
            updateIfChanged(`week-forecast-interval-${i}-high-temp`, interval.maxTempF);
            updateIfChanged(`week-forecast-interval-${i}-low-temp`, interval.minTempF);
            updateIfChanged(`week-forecast-interval-${i}-icon`, interval.weatherIcon);
            updateIfChanged(`week-forecast-interval-${i}-weather`, interval.compactWeather);

            const snowRegex = /.*:.*:(S|SW|SI|RS|WM|BS)$/g;
            const snow = snowRegex.test(interval.weatherPrimaryCoded);
            const rainRegex = /.*:.*:(R|RW|T|TO|UP|ZR|L|BY|ZY|ZR)$/g;
            const rain = rainRegex.test(interval.weatherPrimaryCoded);

            if (snow) {
                if (debug) console.log(`Week forecast interval ${i} - snow: `, interval.snowIN);
                updateIfChanged(`week-forecast-interval-${i}-precip-icon`, "â");
                updateIfChanged(`week-forecast-interval-${i}-precip`, interval.snowIN + "\"");
            } else if (rain) {
                if (debug) console.log(`Week forecast interval ${i} - rain: `, interval.precipIN);
                updateIfChanged(`week-forecast-interval-${i}-precip-icon`, "â");
                updateIfChanged(`week-forecast-interval-${i}-precip`, interval.precipIN + "\"");
            } else {
                if (debug) console.log(`Week forecast interval ${i} - no precip`);
                updateIfChanged(`week-forecast-interval-${i}-precip-icon`, "");
                updateIfChanged(`week-forecast-interval-${i}-precip`, "");
            }
            i++;
        }

        const lastUpdated = moment(data.lastUpdated, "YYYY-MM-DD HH:mm:ss.SSSSSS-ZZ").format("h:mm A, DD MMM YYYY");
        updateIfChanged('forecast-week-last-updated', "Last Updated: " + lastUpdated);

        weekForecastTimer = setTimeout(refreshWeekForecastData, FORECAST_REFRESH_INTERVAL);
    } catch (error) {
        if (debug) console.error("Failed to fetch week forecast data:", error);
        weekForecastTimer = setTimeout(refreshWeekForecastData, 60000); // Retry in 1 minute
    }
}

// Refresh day forecast data
async function refreshDayForecastData() {
    if (document.hidden) return;
    clearTimeout(dayForecastTimer);
    if (debug) console.log("Fetching day forecast data...");
    try {
        const response = await fetch('/forecast/24');
        if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
        const data = await response.json();
        if (debug) console.log("Day forecast data received:", data);

        const dayToDayName = {
            0: "Sun",
            1: "Mon",
            2: "Tue",
            3: "Wed",
            4: "Thu",
            5: "Fri",
            6: "Sat",
            7: "Sun"
        };

        let pixelsPerDegree = 0;
        const tempSpreadPixels = 70;
        const avgTemps = data.data.map((x) => x.avgTempF);
        const lowTemp = Math.min.apply(null, avgTemps);
        const highTemp = Math.max.apply(null, avgTemps);
        const tempSpread = highTemp - lowTemp;
        if (tempSpread > 0) {
            pixelsPerDegree = tempSpreadPixels / tempSpread;
        }

        let i = 0;
        for (const interval of data.data) {
            let intervalDate = moment(interval.dateTimeISO, "YYYY-MM-DD HH:mm:ss.SSSSSS-ZZ");
            let dateLabel;
            if (intervalDate.hour() === 0 || i === 0) {
                dateLabel = intervalDate.format("h A[<BR>]ddd");
            } else {
                dateLabel = intervalDate.format("h A");
            }
            updateIfChanged(`day-forecast-interval-${i}-title`, dateLabel);
            updateIfChanged(`day-forecast-interval-${i}-avg-temp`, interval.avgTempF + "Â°");
            updateIfChanged(`day-forecast-interval-${i}-icon`, interval.weatherIcon);

            const adjustableDiv = document.getElementById(`day-forecast-interval-${i}-adjustable-div`);
            if (adjustableDiv) {
                adjustableDiv.style.paddingTop = pixelsPerDegree * (highTemp - interval.avgTempF) + "px";
            } else if (debug) {
                console.warn(`Adjustable div not found for day-forecast-interval-${i}`);
            }

            const snowRegex = /.*:.*:(S|SW|SI|RS|WM|BS)$/g;
            const snow = snowRegex.test(interval.weatherPrimaryCoded);
            const rainRegex = /.*:.*:(R|RW|T|TO|UP|ZR|L|BY|ZY|ZR)$/g;
            const rain = rainRegex.test(interval.weatherPrimaryCoded);

            if (snow) {
                if (debug) console.log(`Day forecast interval ${i} - snow: `, interval.snowIN);
                updateIfChanged(`day-forecast-interval-${i}-precip-icon`, "â");
                updateIfChanged(`day-forecast-interval-${i}-precip`, interval.snowIN + "\"");
            } else if (rain) {
                if (debug) console.log(`Day forecast interval ${i} - rain: `, interval.precipIN);
                updateIfChanged(`day-forecast-interval-${i}-precip-icon`, "â");
                updateIfChanged(`day-forecast-interval-${i}-precip`, interval.precipIN + "\"");
            } else {
                if (debug) console.log(`Day forecast interval ${i} - no precip`);
                updateIfChanged(`day-forecast-interval-${i}-precip-icon`, "ï¸");
                updateIfChanged(`day-forecast-interval-${i}-precip`, interval.pop + "%");
            }
            i++;
        }

        const lastUpdated = moment(data.lastUpdated, "YYYY-MM-DD HH:mm:ss.SSSSSS-ZZ").format("h:mm A, DD MMM YYYY");
        updateIfChanged('forecast-day-last-updated', "Last Updated: " + lastUpdated);

        dayForecastTimer = setTimeout(refreshDayForecastData, FORECAST_REFRESH_INTERVAL);
    } catch (error) {
        if (debug) console.error("Failed to fetch day forecast data:", error);
        dayForecastTimer = setTimeout(refreshDayForecastData, 60000); // Retry in 1 minute
    }
}

// Generic chart creation function
function createChart(chartName, targetDiv, data, title, options = {}) {
    const { yAxisTitle, chartType = 'spline', tooltipFormat } = options;
    const config = {
        chart: {
            type: chartType,
            style: { fontFamily: 'Inconsolata, monospace' },
            events: { load: () => markAsRendered(chartName) }
        },
        title: { text: title },
        credits: { enabled: false },
        legend: { enabled: false },
        xAxis: {
            type: 'datetime',
            dateTimeLabelFormats: { hour: '%l %p', minute: '%I:%M %p' }
        },
        yAxis: chartType === 'vector' ? { visible: false } : { title: { text: yAxisTitle } },
        time: { useUTC: false },
        series: [{
            name: title,
            data,
            color: '#c1121f',
            ...(tooltipFormat && { tooltip: tooltipFormat })
        }]
    };
    return Highcharts.chart(targetDiv, config);
}

// Mark a chart as rendered
async function markAsRendered(chartName) {
    chartList[chartName].rendered = true;
}

// Debounce function to prevent rapid visibility changes
function debounce(func, wait) {
    let timeout;
    return function (...args) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), wait);
    };
}

// Handle visibility changes
async function handleVisibilityChange() {
    if (document.hidden) {
        clearTimeout(dataRefresherTimer);
        clearTimeout(windDataRefresherTimer);
        clearTimeout(liveReadingsTimer);
        clearTimeout(weekForecastTimer);
        clearTimeout(dayForecastTimer);
        if (visibilityAbortController) {
            visibilityAbortController.abort();
            visibilityAbortController = null;
        }
        lastVisibleTime = Date.now();
        if (debug) console.log('Tab hidden: Timers cleared.');
    } else {
        const now = Date.now();
        const inactiveDurationMs = now - lastVisibleTime;
        if (debug) console.log(`Tab reactivated: Inactive for ${inactiveDurationMs / 1000} seconds`);
        const currentTabKey = Object.keys(chartTabList).find(key => 
            document.getElementById(chartTabList[key].elementIdVal)?.classList.contains('active')
        ) || 'day';

        // Check if charts need to fill in missing data
        for (let key in chartList) {
            const lastRefresh = lastChartRefreshTimes[key] || 0;
            if (chartList[key].rendered && (now - lastRefresh > INACTIVE_THRESHOLD)) {
                const durationMs = now - lastRefresh;
                const durationMinutes = Math.ceil(durationMs / (1000 * 60)); // Convert to minutes, round up
                const duration = `${durationMinutes}m`;
                if (debug) console.log(`Filling in data for ${key} since ${lastRefresh} (${duration})`);
                const missedData = await fetchData(duration, key === 'snowdepth' ? '{{ .SnowDevice }}' : '{{ .PullFromDevice }}');
                if (missedData) {
                    processData(missedData, chartList, true);
                }
            }
        }

        // Restart all refreshers
        refreshLiveReadings();
        refreshData();
        refreshWindDirectionData();
        refreshWeekForecastData();
        refreshDayForecastData();
    }
}