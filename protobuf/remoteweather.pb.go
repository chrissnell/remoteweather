// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.1
// source: protobuf/remoteweather.proto

package protobuf

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LiveWeatherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationName *string `protobuf:"bytes,1,opt,name=stationName,proto3,oneof" json:"stationName,omitempty"`
}

func (x *LiveWeatherRequest) Reset() {
	*x = LiveWeatherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_remoteweather_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveWeatherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveWeatherRequest) ProtoMessage() {}

func (x *LiveWeatherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_remoteweather_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveWeatherRequest.ProtoReflect.Descriptor instead.
func (*LiveWeatherRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_remoteweather_proto_rawDescGZIP(), []int{0}
}

func (x *LiveWeatherRequest) GetStationName() string {
	if x != nil && x.StationName != nil {
		return *x.StationName
	}
	return ""
}

type WeatherSpanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=spanDuration,proto3" json:"spanDuration,omitempty"`
}

func (x *WeatherSpanRequest) Reset() {
	*x = WeatherSpanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_remoteweather_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherSpanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherSpanRequest) ProtoMessage() {}

func (x *WeatherSpanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_remoteweather_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherSpanRequest.ProtoReflect.Descriptor instead.
func (*WeatherSpanRequest) Descriptor() ([]byte, []int) {
	return file_protobuf_remoteweather_proto_rawDescGZIP(), []int{1}
}

func (x *WeatherSpanRequest) GetSpanDuration() *durationpb.Duration {
	if x != nil {
		return x.SpanDuration
	}
	return nil
}

type WeatherSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanStart *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=spanStart,proto3" json:"spanStart,omitempty"`
	Reading   []*WeatherReading      `protobuf:"bytes,2,rep,name=reading,proto3" json:"reading,omitempty"`
}

func (x *WeatherSpan) Reset() {
	*x = WeatherSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_remoteweather_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherSpan) ProtoMessage() {}

func (x *WeatherSpan) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_remoteweather_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherSpan.ProtoReflect.Descriptor instead.
func (*WeatherSpan) Descriptor() ([]byte, []int) {
	return file_protobuf_remoteweather_proto_rawDescGZIP(), []int{2}
}

func (x *WeatherSpan) GetSpanStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SpanStart
	}
	return nil
}

func (x *WeatherSpan) GetReading() []*WeatherReading {
	if x != nil {
		return x.Reading
	}
	return nil
}

type WeatherReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReadingTimestamp   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=readingTimestamp,proto3" json:"readingTimestamp,omitempty"`
	OutsideTemperature float32                `protobuf:"fixed32,2,opt,name=outsideTemperature,proto3" json:"outsideTemperature,omitempty"`
	OutsideHumidity    int32                  `protobuf:"varint,3,opt,name=outsideHumidity,proto3" json:"outsideHumidity,omitempty"`
	Barometer          float32                `protobuf:"fixed32,4,opt,name=barometer,proto3" json:"barometer,omitempty"`
	WindSpeed          int32                  `protobuf:"varint,5,opt,name=windSpeed,proto3" json:"windSpeed,omitempty"`
	WindDirection      int32                  `protobuf:"varint,6,opt,name=windDirection,proto3" json:"windDirection,omitempty"`
	RainfallDay        float32                `protobuf:"fixed32,7,opt,name=rainfallDay,proto3" json:"rainfallDay,omitempty"`
	WindChill          float32                `protobuf:"fixed32,8,opt,name=windChill,proto3" json:"windChill,omitempty"`
	HeatIndex          float32                `protobuf:"fixed32,9,opt,name=heatIndex,proto3" json:"heatIndex,omitempty"`
	InsideTemperature  float32                `protobuf:"fixed32,10,opt,name=insideTemperature,proto3" json:"insideTemperature,omitempty"`
	InsideHumidity     int32                  `protobuf:"varint,11,opt,name=insideHumidity,proto3" json:"insideHumidity,omitempty"`
	StationName        string                 `protobuf:"bytes,12,opt,name=stationName,proto3" json:"stationName,omitempty"`
}

func (x *WeatherReading) Reset() {
	*x = WeatherReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_remoteweather_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherReading) ProtoMessage() {}

func (x *WeatherReading) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_remoteweather_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherReading.ProtoReflect.Descriptor instead.
func (*WeatherReading) Descriptor() ([]byte, []int) {
	return file_protobuf_remoteweather_proto_rawDescGZIP(), []int{3}
}

func (x *WeatherReading) GetReadingTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReadingTimestamp
	}
	return nil
}

func (x *WeatherReading) GetOutsideTemperature() float32 {
	if x != nil {
		return x.OutsideTemperature
	}
	return 0
}

func (x *WeatherReading) GetOutsideHumidity() int32 {
	if x != nil {
		return x.OutsideHumidity
	}
	return 0
}

func (x *WeatherReading) GetBarometer() float32 {
	if x != nil {
		return x.Barometer
	}
	return 0
}

func (x *WeatherReading) GetWindSpeed() int32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *WeatherReading) GetWindDirection() int32 {
	if x != nil {
		return x.WindDirection
	}
	return 0
}

func (x *WeatherReading) GetRainfallDay() float32 {
	if x != nil {
		return x.RainfallDay
	}
	return 0
}

func (x *WeatherReading) GetWindChill() float32 {
	if x != nil {
		return x.WindChill
	}
	return 0
}

func (x *WeatherReading) GetHeatIndex() float32 {
	if x != nil {
		return x.HeatIndex
	}
	return 0
}

func (x *WeatherReading) GetInsideTemperature() float32 {
	if x != nil {
		return x.InsideTemperature
	}
	return 0
}

func (x *WeatherReading) GetInsideHumidity() int32 {
	if x != nil {
		return x.InsideHumidity
	}
	return 0
}

func (x *WeatherReading) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protobuf_remoteweather_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protobuf_remoteweather_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protobuf_remoteweather_proto_rawDescGZIP(), []int{4}
}

var File_protobuf_remoteweather_proto protoreflect.FileDescriptor

var file_protobuf_remoteweather_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a,
	0x12, 0x4c, 0x69, 0x76, 0x65, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x12, 0x57, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x72, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x38,
	0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x57, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x22, 0xea, 0x03, 0x0a, 0x0e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x72, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e,
	0x0a, 0x12, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x73,
	0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x72, 0x6f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x61, 0x72,
	0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x69, 0x6e,
	0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x61,
	0x69, 0x6e, 0x66, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0b, 0x72, 0x61, 0x69, 0x6e, 0x66, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x09, 0x77, 0x69, 0x6e, 0x64, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65,
	0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68,
	0x65, 0x61, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x69,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65,
	0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xa5, 0x01, 0x0a, 0x07, 0x57, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x57, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x57,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x5e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53,
	0x70, 0x61, 0x6e, 0x12, 0x13, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x70, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x70,
	0x61, 0x6e, 0x2f, 0x7b, 0x73, 0x70, 0x61, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x7d, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x63, 0x68, 0x72, 0x69, 0x73, 0x73, 0x6e, 0x65, 0x6c, 0x6c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protobuf_remoteweather_proto_rawDescOnce sync.Once
	file_protobuf_remoteweather_proto_rawDescData = file_protobuf_remoteweather_proto_rawDesc
)

func file_protobuf_remoteweather_proto_rawDescGZIP() []byte {
	file_protobuf_remoteweather_proto_rawDescOnce.Do(func() {
		file_protobuf_remoteweather_proto_rawDescData = protoimpl.X.CompressGZIP(file_protobuf_remoteweather_proto_rawDescData)
	})
	return file_protobuf_remoteweather_proto_rawDescData
}

var file_protobuf_remoteweather_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_protobuf_remoteweather_proto_goTypes = []interface{}{
	(*LiveWeatherRequest)(nil),    // 0: LiveWeatherRequest
	(*WeatherSpanRequest)(nil),    // 1: WeatherSpanRequest
	(*WeatherSpan)(nil),           // 2: WeatherSpan
	(*WeatherReading)(nil),        // 3: WeatherReading
	(*Empty)(nil),                 // 4: Empty
	(*durationpb.Duration)(nil),   // 5: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_protobuf_remoteweather_proto_depIdxs = []int32{
	5, // 0: WeatherSpanRequest.spanDuration:type_name -> google.protobuf.Duration
	6, // 1: WeatherSpan.spanStart:type_name -> google.protobuf.Timestamp
	3, // 2: WeatherSpan.reading:type_name -> WeatherReading
	6, // 3: WeatherReading.readingTimestamp:type_name -> google.protobuf.Timestamp
	0, // 4: Weather.GetLiveWeather:input_type -> LiveWeatherRequest
	1, // 5: Weather.GetWeatherSpan:input_type -> WeatherSpanRequest
	3, // 6: Weather.GetLiveWeather:output_type -> WeatherReading
	2, // 7: Weather.GetWeatherSpan:output_type -> WeatherSpan
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_protobuf_remoteweather_proto_init() }
func file_protobuf_remoteweather_proto_init() {
	if File_protobuf_remoteweather_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protobuf_remoteweather_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveWeatherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_remoteweather_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherSpanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_remoteweather_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_remoteweather_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeatherReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protobuf_remoteweather_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protobuf_remoteweather_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protobuf_remoteweather_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protobuf_remoteweather_proto_goTypes,
		DependencyIndexes: file_protobuf_remoteweather_proto_depIdxs,
		MessageInfos:      file_protobuf_remoteweather_proto_msgTypes,
	}.Build()
	File_protobuf_remoteweather_proto = out.File
	file_protobuf_remoteweather_proto_rawDesc = nil
	file_protobuf_remoteweather_proto_goTypes = nil
	file_protobuf_remoteweather_proto_depIdxs = nil
}
