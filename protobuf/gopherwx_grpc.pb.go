// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeatherClient is the client API for Weather service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherClient interface {
	GetLiveWeather(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Weather_GetLiveWeatherClient, error)
	GetWeatherSpan(ctx context.Context, in *WeatherSpanRequest, opts ...grpc.CallOption) (*WeatherSpan, error)
}

type weatherClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherClient(cc grpc.ClientConnInterface) WeatherClient {
	return &weatherClient{cc}
}

func (c *weatherClient) GetLiveWeather(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Weather_GetLiveWeatherClient, error) {
	stream, err := c.cc.NewStream(ctx, &Weather_ServiceDesc.Streams[0], "/Weather/GetLiveWeather", opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherGetLiveWeatherClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Weather_GetLiveWeatherClient interface {
	Recv() (*WeatherReading, error)
	grpc.ClientStream
}

type weatherGetLiveWeatherClient struct {
	grpc.ClientStream
}

func (x *weatherGetLiveWeatherClient) Recv() (*WeatherReading, error) {
	m := new(WeatherReading)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weatherClient) GetWeatherSpan(ctx context.Context, in *WeatherSpanRequest, opts ...grpc.CallOption) (*WeatherSpan, error) {
	out := new(WeatherSpan)
	err := c.cc.Invoke(ctx, "/Weather/GetWeatherSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherServer is the server API for Weather service.
// All implementations must embed UnimplementedWeatherServer
// for forward compatibility
type WeatherServer interface {
	GetLiveWeather(*Empty, Weather_GetLiveWeatherServer) error
	GetWeatherSpan(context.Context, *WeatherSpanRequest) (*WeatherSpan, error)
	mustEmbedUnimplementedWeatherServer()
}

// UnimplementedWeatherServer must be embedded to have forward compatible implementations.
type UnimplementedWeatherServer struct {
}

func (UnimplementedWeatherServer) GetLiveWeather(*Empty, Weather_GetLiveWeatherServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLiveWeather not implemented")
}
func (UnimplementedWeatherServer) GetWeatherSpan(context.Context, *WeatherSpanRequest) (*WeatherSpan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeatherSpan not implemented")
}
func (UnimplementedWeatherServer) mustEmbedUnimplementedWeatherServer() {}

// UnsafeWeatherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherServer will
// result in compilation errors.
type UnsafeWeatherServer interface {
	mustEmbedUnimplementedWeatherServer()
}

func RegisterWeatherServer(s grpc.ServiceRegistrar, srv WeatherServer) {
	s.RegisterService(&Weather_ServiceDesc, srv)
}

func _Weather_GetLiveWeather_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeatherServer).GetLiveWeather(m, &weatherGetLiveWeatherServer{stream})
}

type Weather_GetLiveWeatherServer interface {
	Send(*WeatherReading) error
	grpc.ServerStream
}

type weatherGetLiveWeatherServer struct {
	grpc.ServerStream
}

func (x *weatherGetLiveWeatherServer) Send(m *WeatherReading) error {
	return x.ServerStream.SendMsg(m)
}

func _Weather_GetWeatherSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherServer).GetWeatherSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Weather/GetWeatherSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherServer).GetWeatherSpan(ctx, req.(*WeatherSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Weather_ServiceDesc is the grpc.ServiceDesc for Weather service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Weather_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Weather",
	HandlerType: (*WeatherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeatherSpan",
			Handler:    _Weather_GetWeatherSpan_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLiveWeather",
			Handler:       _Weather_GetLiveWeather_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/gopherwx.proto",
}
