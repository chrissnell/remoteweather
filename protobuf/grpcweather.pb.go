// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpcweather.proto

/*
Package grpcweather is a generated protocol buffer package.

It is generated from these files:
	grpcweather.proto

It has these top-level messages:
	WeatherReading
	Empty
*/
package grpcweather

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type WeatherReading struct {
	LastReading     *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=lastReading" json:"lastReading,omitempty"`
	OutsideTemp     float32                    `protobuf:"fixed32,2,opt,name=outsideTemp" json:"outsideTemp,omitempty"`
	OutsideHumidity int32                      `protobuf:"varint,3,opt,name=outsideHumidity" json:"outsideHumidity,omitempty"`
	Barometer       float32                    `protobuf:"fixed32,4,opt,name=barometer" json:"barometer,omitempty"`
	WindSpeed       int32                      `protobuf:"varint,5,opt,name=windSpeed" json:"windSpeed,omitempty"`
	WindDir         int32                      `protobuf:"varint,6,opt,name=windDir" json:"windDir,omitempty"`
	RainfallDay     float32                    `protobuf:"fixed32,7,opt,name=rainfallDay" json:"rainfallDay,omitempty"`
}

func (m *WeatherReading) Reset()                    { *m = WeatherReading{} }
func (m *WeatherReading) String() string            { return proto.CompactTextString(m) }
func (*WeatherReading) ProtoMessage()               {}
func (*WeatherReading) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WeatherReading) GetLastReading() *google_protobuf.Timestamp {
	if m != nil {
		return m.LastReading
	}
	return nil
}

func (m *WeatherReading) GetOutsideTemp() float32 {
	if m != nil {
		return m.OutsideTemp
	}
	return 0
}

func (m *WeatherReading) GetOutsideHumidity() int32 {
	if m != nil {
		return m.OutsideHumidity
	}
	return 0
}

func (m *WeatherReading) GetBarometer() float32 {
	if m != nil {
		return m.Barometer
	}
	return 0
}

func (m *WeatherReading) GetWindSpeed() int32 {
	if m != nil {
		return m.WindSpeed
	}
	return 0
}

func (m *WeatherReading) GetWindDir() int32 {
	if m != nil {
		return m.WindDir
	}
	return 0
}

func (m *WeatherReading) GetRainfallDay() float32 {
	if m != nil {
		return m.RainfallDay
	}
	return 0
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*WeatherReading)(nil), "WeatherReading")
	proto.RegisterType((*Empty)(nil), "Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Weather service

type WeatherClient interface {
	GetLiveWeather(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Weather_GetLiveWeatherClient, error)
}

type weatherClient struct {
	cc *grpc.ClientConn
}

func NewWeatherClient(cc *grpc.ClientConn) WeatherClient {
	return &weatherClient{cc}
}

func (c *weatherClient) GetLiveWeather(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Weather_GetLiveWeatherClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Weather_serviceDesc.Streams[0], c.cc, "/Weather/GetLiveWeather", opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherGetLiveWeatherClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Weather_GetLiveWeatherClient interface {
	Recv() (*WeatherReading, error)
	grpc.ClientStream
}

type weatherGetLiveWeatherClient struct {
	grpc.ClientStream
}

func (x *weatherGetLiveWeatherClient) Recv() (*WeatherReading, error) {
	m := new(WeatherReading)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Weather service

type WeatherServer interface {
	GetLiveWeather(*Empty, Weather_GetLiveWeatherServer) error
}

func RegisterWeatherServer(s *grpc.Server, srv WeatherServer) {
	s.RegisterService(&_Weather_serviceDesc, srv)
}

func _Weather_GetLiveWeather_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeatherServer).GetLiveWeather(m, &weatherGetLiveWeatherServer{stream})
}

type Weather_GetLiveWeatherServer interface {
	Send(*WeatherReading) error
	grpc.ServerStream
}

type weatherGetLiveWeatherServer struct {
	grpc.ServerStream
}

func (x *weatherGetLiveWeatherServer) Send(m *WeatherReading) error {
	return x.ServerStream.SendMsg(m)
}

var _Weather_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Weather",
	HandlerType: (*WeatherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLiveWeather",
			Handler:       _Weather_GetLiveWeather_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpcweather.proto",
}

func init() { proto.RegisterFile("grpcweather.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4f, 0x84, 0x30,
	0x18, 0x86, 0x05, 0x05, 0x62, 0x49, 0xee, 0x62, 0xa7, 0x86, 0x98, 0x48, 0x98, 0x58, 0xec, 0x99,
	0x73, 0x71, 0x70, 0x3c, 0xa3, 0x83, 0x13, 0x5e, 0xe2, 0x5c, 0xec, 0x77, 0xd8, 0x84, 0xd2, 0xa6,
	0x14, 0x2f, 0xfc, 0x0d, 0x7f, 0xb1, 0xa1, 0x40, 0x0e, 0x6f, 0x7c, 0x9f, 0xbe, 0x7d, 0xf2, 0xe5,
	0x45, 0x37, 0x95, 0xd1, 0x5f, 0x47, 0x60, 0xf6, 0x1b, 0x0c, 0xd5, 0x46, 0x59, 0x95, 0xdc, 0x55,
	0x4a, 0x55, 0x35, 0x6c, 0x5c, 0x2a, 0xbb, 0xc3, 0xc6, 0x0a, 0x09, 0xad, 0x65, 0x52, 0x8f, 0x85,
	0xec, 0xd7, 0x47, 0xab, 0xcf, 0xf1, 0x4b, 0x01, 0x8c, 0x8b, 0xa6, 0xc2, 0xcf, 0x28, 0xae, 0x59,
	0x6b, 0xa7, 0x48, 0xbc, 0xd4, 0xcb, 0xe3, 0x6d, 0x42, 0x47, 0x13, 0x9d, 0x4d, 0x74, 0x3f, 0x9b,
	0x8a, 0x65, 0x1d, 0xa7, 0x28, 0x56, 0x9d, 0x6d, 0x05, 0x87, 0x3d, 0x48, 0x4d, 0xfc, 0xd4, 0xcb,
	0xfd, 0x62, 0x89, 0x70, 0x8e, 0xd6, 0x53, 0x7c, 0xeb, 0xa4, 0xe0, 0xc2, 0xf6, 0xe4, 0x32, 0xf5,
	0xf2, 0xa0, 0x38, 0xc7, 0xf8, 0x16, 0x5d, 0x97, 0xcc, 0x28, 0x09, 0x16, 0x0c, 0xb9, 0x72, 0xa6,
	0x13, 0x18, 0x5e, 0x8f, 0xa2, 0xe1, 0x1f, 0x1a, 0x80, 0x93, 0xc0, 0x19, 0x4e, 0x00, 0x13, 0x14,
	0x0d, 0x61, 0x27, 0x0c, 0x09, 0xdd, 0xdb, 0x1c, 0x87, 0x0b, 0x0d, 0x13, 0xcd, 0x81, 0xd5, 0xf5,
	0x8e, 0xf5, 0x24, 0x1a, 0x2f, 0x5c, 0xa0, 0x2c, 0x42, 0xc1, 0x8b, 0xd4, 0xb6, 0xdf, 0x3e, 0xa1,
	0x68, 0x1a, 0x07, 0xdf, 0xa3, 0xd5, 0x2b, 0xd8, 0x77, 0xf1, 0x03, 0x33, 0x09, 0xa9, 0x2b, 0x25,
	0x6b, 0xfa, 0x7f, 0xc0, 0xec, 0xe2, 0xc1, 0x2b, 0x43, 0xb7, 0xd3, 0xe3, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x63, 0x62, 0x9d, 0x0b, 0x94, 0x01, 0x00, 0x00,
}
