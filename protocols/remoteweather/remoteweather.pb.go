// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: protocols/remoteweather/remoteweather.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LiveWeatherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationName string `protobuf:"bytes,1,opt,name=stationName,proto3" json:"stationName,omitempty"`
}

func (x *LiveWeatherRequest) Reset() {
	*x = LiveWeatherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveWeatherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveWeatherRequest) ProtoMessage() {}

func (x *LiveWeatherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveWeatherRequest.ProtoReflect.Descriptor instead.
func (*LiveWeatherRequest) Descriptor() ([]byte, []int) {
	return file_protocols_remoteweather_remoteweather_proto_rawDescGZIP(), []int{0}
}

func (x *LiveWeatherRequest) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

type WeatherSpanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=spanDuration,proto3" json:"spanDuration,omitempty"`
	StationName  string               `protobuf:"bytes,2,opt,name=stationName,proto3" json:"stationName,omitempty"`
}

func (x *WeatherSpanRequest) Reset() {
	*x = WeatherSpanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherSpanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherSpanRequest) ProtoMessage() {}

func (x *WeatherSpanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherSpanRequest.ProtoReflect.Descriptor instead.
func (*WeatherSpanRequest) Descriptor() ([]byte, []int) {
	return file_protocols_remoteweather_remoteweather_proto_rawDescGZIP(), []int{1}
}

func (x *WeatherSpanRequest) GetSpanDuration() *durationpb.Duration {
	if x != nil {
		return x.SpanDuration
	}
	return nil
}

func (x *WeatherSpanRequest) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

type LatestReadingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationName string `protobuf:"bytes,1,opt,name=stationName,proto3" json:"stationName,omitempty"`
}

func (x *LatestReadingRequest) Reset() {
	*x = LatestReadingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestReadingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestReadingRequest) ProtoMessage() {}

func (x *LatestReadingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestReadingRequest.ProtoReflect.Descriptor instead.
func (*LatestReadingRequest) Descriptor() ([]byte, []int) {
	return file_protocols_remoteweather_remoteweather_proto_rawDescGZIP(), []int{2}
}

func (x *LatestReadingRequest) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

type WeatherSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpanStart *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=spanStart,proto3" json:"spanStart,omitempty"`
	Reading   []*WeatherReading      `protobuf:"bytes,2,rep,name=reading,proto3" json:"reading,omitempty"`
}

func (x *WeatherSpan) Reset() {
	*x = WeatherSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherSpan) ProtoMessage() {}

func (x *WeatherSpan) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherSpan.ProtoReflect.Descriptor instead.
func (*WeatherSpan) Descriptor() ([]byte, []int) {
	return file_protocols_remoteweather_remoteweather_proto_rawDescGZIP(), []int{3}
}

func (x *WeatherSpan) GetSpanStart() *timestamppb.Timestamp {
	if x != nil {
		return x.SpanStart
	}
	return nil
}

func (x *WeatherSpan) GetReading() []*WeatherReading {
	if x != nil {
		return x.Reading
	}
	return nil
}

// Complete weather reading with all available sensor data
type WeatherReading struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Basic metadata
	ReadingTimestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=readingTimestamp,proto3" json:"readingTimestamp,omitempty"`
	StationName      string                 `protobuf:"bytes,2,opt,name=stationName,proto3" json:"stationName,omitempty"`
	StationType      string                 `protobuf:"bytes,3,opt,name=stationType,proto3" json:"stationType,omitempty"`
	// Station location and APRS info
	StationLatitude  float64 `protobuf:"fixed64,188,opt,name=stationLatitude,proto3" json:"stationLatitude,omitempty"`   // Station latitude
	StationLongitude float64 `protobuf:"fixed64,189,opt,name=stationLongitude,proto3" json:"stationLongitude,omitempty"` // Station longitude
	StationAltitude  float64 `protobuf:"fixed64,190,opt,name=stationAltitude,proto3" json:"stationAltitude,omitempty"`   // Station altitude in meters
	AprsEnabled      bool    `protobuf:"varint,191,opt,name=aprsEnabled,proto3" json:"aprsEnabled,omitempty"`            // Whether APRS is enabled for this station
	AprsCallsign     string  `protobuf:"bytes,192,opt,name=aprsCallsign,proto3" json:"aprsCallsign,omitempty"`           // APRS callsign if enabled
	// Primary environmental readings
	Barometer          float32 `protobuf:"fixed32,4,opt,name=barometer,proto3" json:"barometer,omitempty"`                   // Barometric pressure
	InsideTemperature  float32 `protobuf:"fixed32,5,opt,name=insideTemperature,proto3" json:"insideTemperature,omitempty"`   // Inside temperature
	InsideHumidity     float32 `protobuf:"fixed32,6,opt,name=insideHumidity,proto3" json:"insideHumidity,omitempty"`         // Inside humidity percentage
	OutsideTemperature float32 `protobuf:"fixed32,7,opt,name=outsideTemperature,proto3" json:"outsideTemperature,omitempty"` // Outside temperature
	OutsideHumidity    float32 `protobuf:"fixed32,8,opt,name=outsideHumidity,proto3" json:"outsideHumidity,omitempty"`       // Outside humidity percentage
	// Wind measurements
	WindSpeed     float32 `protobuf:"fixed32,9,opt,name=windSpeed,proto3" json:"windSpeed,omitempty"`          // Current wind speed
	WindSpeed10   float32 `protobuf:"fixed32,10,opt,name=windSpeed10,proto3" json:"windSpeed10,omitempty"`     // 10-minute average wind speed
	WindDirection float32 `protobuf:"fixed32,11,opt,name=windDirection,proto3" json:"windDirection,omitempty"` // Wind direction in degrees
	WindChill     float32 `protobuf:"fixed32,12,opt,name=windChill,proto3" json:"windChill,omitempty"`         // Calculated wind chill
	// Temperature index
	HeatIndex float32 `protobuf:"fixed32,13,opt,name=heatIndex,proto3" json:"heatIndex,omitempty"` // Calculated heat index
	// Additional temperature sensors
	ExtraTemp1 float32 `protobuf:"fixed32,14,opt,name=extraTemp1,proto3" json:"extraTemp1,omitempty"` // Extra temperature sensor 1
	ExtraTemp2 float32 `protobuf:"fixed32,15,opt,name=extraTemp2,proto3" json:"extraTemp2,omitempty"` // Extra temperature sensor 2
	ExtraTemp3 float32 `protobuf:"fixed32,16,opt,name=extraTemp3,proto3" json:"extraTemp3,omitempty"` // Extra temperature sensor 3
	ExtraTemp4 float32 `protobuf:"fixed32,17,opt,name=extraTemp4,proto3" json:"extraTemp4,omitempty"` // Extra temperature sensor 4
	ExtraTemp5 float32 `protobuf:"fixed32,18,opt,name=extraTemp5,proto3" json:"extraTemp5,omitempty"` // Extra temperature sensor 5
	ExtraTemp6 float32 `protobuf:"fixed32,19,opt,name=extraTemp6,proto3" json:"extraTemp6,omitempty"` // Extra temperature sensor 6
	ExtraTemp7 float32 `protobuf:"fixed32,20,opt,name=extraTemp7,proto3" json:"extraTemp7,omitempty"` // Extra temperature sensor 7
	// Soil temperature sensors
	SoilTemp1 float32 `protobuf:"fixed32,21,opt,name=soilTemp1,proto3" json:"soilTemp1,omitempty"` // Soil temperature sensor 1
	SoilTemp2 float32 `protobuf:"fixed32,22,opt,name=soilTemp2,proto3" json:"soilTemp2,omitempty"` // Soil temperature sensor 2
	SoilTemp3 float32 `protobuf:"fixed32,23,opt,name=soilTemp3,proto3" json:"soilTemp3,omitempty"` // Soil temperature sensor 3
	SoilTemp4 float32 `protobuf:"fixed32,24,opt,name=soilTemp4,proto3" json:"soilTemp4,omitempty"` // Soil temperature sensor 4
	// Leaf temperature sensors
	LeafTemp1 float32 `protobuf:"fixed32,25,opt,name=leafTemp1,proto3" json:"leafTemp1,omitempty"` // Leaf temperature sensor 1
	LeafTemp2 float32 `protobuf:"fixed32,26,opt,name=leafTemp2,proto3" json:"leafTemp2,omitempty"` // Leaf temperature sensor 2
	LeafTemp3 float32 `protobuf:"fixed32,27,opt,name=leafTemp3,proto3" json:"leafTemp3,omitempty"` // Leaf temperature sensor 3
	LeafTemp4 float32 `protobuf:"fixed32,28,opt,name=leafTemp4,proto3" json:"leafTemp4,omitempty"` // Leaf temperature sensor 4
	// Additional humidity sensors
	ExtraHumidity1 float32 `protobuf:"fixed32,29,opt,name=extraHumidity1,proto3" json:"extraHumidity1,omitempty"` // Extra humidity sensor 1
	ExtraHumidity2 float32 `protobuf:"fixed32,30,opt,name=extraHumidity2,proto3" json:"extraHumidity2,omitempty"` // Extra humidity sensor 2
	ExtraHumidity3 float32 `protobuf:"fixed32,31,opt,name=extraHumidity3,proto3" json:"extraHumidity3,omitempty"` // Extra humidity sensor 3
	ExtraHumidity4 float32 `protobuf:"fixed32,32,opt,name=extraHumidity4,proto3" json:"extraHumidity4,omitempty"` // Extra humidity sensor 4
	ExtraHumidity5 float32 `protobuf:"fixed32,33,opt,name=extraHumidity5,proto3" json:"extraHumidity5,omitempty"` // Extra humidity sensor 5
	ExtraHumidity6 float32 `protobuf:"fixed32,34,opt,name=extraHumidity6,proto3" json:"extraHumidity6,omitempty"` // Extra humidity sensor 6
	ExtraHumidity7 float32 `protobuf:"fixed32,35,opt,name=extraHumidity7,proto3" json:"extraHumidity7,omitempty"` // Extra humidity sensor 7
	// Rain measurements
	RainRate        float32                `protobuf:"fixed32,36,opt,name=rainRate,proto3" json:"rainRate,omitempty"`               // Current rain rate
	RainIncremental float32                `protobuf:"fixed32,37,opt,name=rainIncremental,proto3" json:"rainIncremental,omitempty"` // Incremental rain since last reading
	StormRain       float32                `protobuf:"fixed32,38,opt,name=stormRain,proto3" json:"stormRain,omitempty"`             // Rain during current storm
	StormStart      *timestamppb.Timestamp `protobuf:"bytes,39,opt,name=stormStart,proto3" json:"stormStart,omitempty"`             // Storm start timestamp
	DayRain         float32                `protobuf:"fixed32,40,opt,name=dayRain,proto3" json:"dayRain,omitempty"`                 // Rain for current day
	MonthRain       float32                `protobuf:"fixed32,41,opt,name=monthRain,proto3" json:"monthRain,omitempty"`             // Rain for current month
	YearRain        float32                `protobuf:"fixed32,42,opt,name=yearRain,proto3" json:"yearRain,omitempty"`               // Rain for current year
	// Solar measurements
	SolarWatts          float32 `protobuf:"fixed32,43,opt,name=solarWatts,proto3" json:"solarWatts,omitempty"`                   // Solar irradiance in watts/m²
	PotentialSolarWatts float32 `protobuf:"fixed32,44,opt,name=potentialSolarWatts,proto3" json:"potentialSolarWatts,omitempty"` // Potential solar irradiance
	SolarJoules         float32 `protobuf:"fixed32,45,opt,name=solarJoules,proto3" json:"solarJoules,omitempty"`                 // Solar energy in joules
	Uv                  float32 `protobuf:"fixed32,46,opt,name=uv,proto3" json:"uv,omitempty"`                                   // UV index
	Radiation           float32 `protobuf:"fixed32,47,opt,name=radiation,proto3" json:"radiation,omitempty"`                     // Solar radiation
	// Evapotranspiration
	DayET   float32 `protobuf:"fixed32,48,opt,name=dayET,proto3" json:"dayET,omitempty"`     // Daily evapotranspiration
	MonthET float32 `protobuf:"fixed32,49,opt,name=monthET,proto3" json:"monthET,omitempty"` // Monthly evapotranspiration
	YearET  float32 `protobuf:"fixed32,50,opt,name=yearET,proto3" json:"yearET,omitempty"`   // Yearly evapotranspiration
	// Soil moisture sensors
	SoilMoisture1 float32 `protobuf:"fixed32,51,opt,name=soilMoisture1,proto3" json:"soilMoisture1,omitempty"` // Soil moisture sensor 1
	SoilMoisture2 float32 `protobuf:"fixed32,52,opt,name=soilMoisture2,proto3" json:"soilMoisture2,omitempty"` // Soil moisture sensor 2
	SoilMoisture3 float32 `protobuf:"fixed32,53,opt,name=soilMoisture3,proto3" json:"soilMoisture3,omitempty"` // Soil moisture sensor 3
	SoilMoisture4 float32 `protobuf:"fixed32,54,opt,name=soilMoisture4,proto3" json:"soilMoisture4,omitempty"` // Soil moisture sensor 4
	// Leaf wetness sensors
	LeafWetness1 float32 `protobuf:"fixed32,55,opt,name=leafWetness1,proto3" json:"leafWetness1,omitempty"` // Leaf wetness sensor 1
	LeafWetness2 float32 `protobuf:"fixed32,56,opt,name=leafWetness2,proto3" json:"leafWetness2,omitempty"` // Leaf wetness sensor 2
	LeafWetness3 float32 `protobuf:"fixed32,57,opt,name=leafWetness3,proto3" json:"leafWetness3,omitempty"` // Leaf wetness sensor 3
	LeafWetness4 float32 `protobuf:"fixed32,58,opt,name=leafWetness4,proto3" json:"leafWetness4,omitempty"` // Leaf wetness sensor 4
	// Alarm states
	InsideAlarm    uint32 `protobuf:"varint,59,opt,name=insideAlarm,proto3" json:"insideAlarm,omitempty"`       // Inside alarm status
	RainAlarm      uint32 `protobuf:"varint,60,opt,name=rainAlarm,proto3" json:"rainAlarm,omitempty"`           // Rain alarm status
	OutsideAlarm1  uint32 `protobuf:"varint,61,opt,name=outsideAlarm1,proto3" json:"outsideAlarm1,omitempty"`   // Outside alarm 1 status
	OutsideAlarm2  uint32 `protobuf:"varint,62,opt,name=outsideAlarm2,proto3" json:"outsideAlarm2,omitempty"`   // Outside alarm 2 status
	ExtraAlarm1    uint32 `protobuf:"varint,63,opt,name=extraAlarm1,proto3" json:"extraAlarm1,omitempty"`       // Extra alarm 1 status
	ExtraAlarm2    uint32 `protobuf:"varint,64,opt,name=extraAlarm2,proto3" json:"extraAlarm2,omitempty"`       // Extra alarm 2 status
	ExtraAlarm3    uint32 `protobuf:"varint,65,opt,name=extraAlarm3,proto3" json:"extraAlarm3,omitempty"`       // Extra alarm 3 status
	ExtraAlarm4    uint32 `protobuf:"varint,66,opt,name=extraAlarm4,proto3" json:"extraAlarm4,omitempty"`       // Extra alarm 4 status
	ExtraAlarm5    uint32 `protobuf:"varint,67,opt,name=extraAlarm5,proto3" json:"extraAlarm5,omitempty"`       // Extra alarm 5 status
	ExtraAlarm6    uint32 `protobuf:"varint,68,opt,name=extraAlarm6,proto3" json:"extraAlarm6,omitempty"`       // Extra alarm 6 status
	ExtraAlarm7    uint32 `protobuf:"varint,69,opt,name=extraAlarm7,proto3" json:"extraAlarm7,omitempty"`       // Extra alarm 7 status
	ExtraAlarm8    uint32 `protobuf:"varint,70,opt,name=extraAlarm8,proto3" json:"extraAlarm8,omitempty"`       // Extra alarm 8 status
	SoilLeafAlarm1 uint32 `protobuf:"varint,71,opt,name=soilLeafAlarm1,proto3" json:"soilLeafAlarm1,omitempty"` // Soil/leaf alarm 1 status
	SoilLeafAlarm2 uint32 `protobuf:"varint,72,opt,name=soilLeafAlarm2,proto3" json:"soilLeafAlarm2,omitempty"` // Soil/leaf alarm 2 status
	SoilLeafAlarm3 uint32 `protobuf:"varint,73,opt,name=soilLeafAlarm3,proto3" json:"soilLeafAlarm3,omitempty"` // Soil/leaf alarm 3 status
	SoilLeafAlarm4 uint32 `protobuf:"varint,74,opt,name=soilLeafAlarm4,proto3" json:"soilLeafAlarm4,omitempty"` // Soil/leaf alarm 4 status
	// Battery and power status
	TxBatteryStatus       uint32  `protobuf:"varint,75,opt,name=txBatteryStatus,proto3" json:"txBatteryStatus,omitempty"`              // Transmitter battery status
	ConsBatteryVoltage    float32 `protobuf:"fixed32,76,opt,name=consBatteryVoltage,proto3" json:"consBatteryVoltage,omitempty"`       // Console battery voltage
	StationBatteryVoltage float32 `protobuf:"fixed32,77,opt,name=stationBatteryVoltage,proto3" json:"stationBatteryVoltage,omitempty"` // Station battery voltage
	// Forecast information
	ForecastIcon uint32 `protobuf:"varint,78,opt,name=forecastIcon,proto3" json:"forecastIcon,omitempty"` // Forecast icon identifier
	ForecastRule uint32 `protobuf:"varint,79,opt,name=forecastRule,proto3" json:"forecastRule,omitempty"` // Forecast rule identifier
	// Astronomical data
	Sunrise *timestamppb.Timestamp `protobuf:"bytes,80,opt,name=sunrise,proto3" json:"sunrise,omitempty"` // Sunrise time
	Sunset  *timestamppb.Timestamp `protobuf:"bytes,81,opt,name=sunset,proto3" json:"sunset,omitempty"`   // Sunset time
	// Snow measurements
	SnowDistance float32 `protobuf:"fixed32,82,opt,name=snowDistance,proto3" json:"snowDistance,omitempty"` // Snow distance measurement
	SnowDepth    float32 `protobuf:"fixed32,83,opt,name=snowDepth,proto3" json:"snowDepth,omitempty"`       // Snow depth measurement
	// Extended float fields for custom data
	ExtraFloat1  float32 `protobuf:"fixed32,84,opt,name=extraFloat1,proto3" json:"extraFloat1,omitempty"`   // Extra float field 1
	ExtraFloat2  float32 `protobuf:"fixed32,85,opt,name=extraFloat2,proto3" json:"extraFloat2,omitempty"`   // Extra float field 2
	ExtraFloat3  float32 `protobuf:"fixed32,86,opt,name=extraFloat3,proto3" json:"extraFloat3,omitempty"`   // Extra float field 3
	ExtraFloat4  float32 `protobuf:"fixed32,87,opt,name=extraFloat4,proto3" json:"extraFloat4,omitempty"`   // Extra float field 4
	ExtraFloat5  float32 `protobuf:"fixed32,88,opt,name=extraFloat5,proto3" json:"extraFloat5,omitempty"`   // Extra float field 5
	ExtraFloat6  float32 `protobuf:"fixed32,89,opt,name=extraFloat6,proto3" json:"extraFloat6,omitempty"`   // Extra float field 6
	ExtraFloat7  float32 `protobuf:"fixed32,90,opt,name=extraFloat7,proto3" json:"extraFloat7,omitempty"`   // Extra float field 7
	ExtraFloat8  float32 `protobuf:"fixed32,91,opt,name=extraFloat8,proto3" json:"extraFloat8,omitempty"`   // Extra float field 8
	ExtraFloat9  float32 `protobuf:"fixed32,92,opt,name=extraFloat9,proto3" json:"extraFloat9,omitempty"`   // Extra float field 9
	ExtraFloat10 float32 `protobuf:"fixed32,93,opt,name=extraFloat10,proto3" json:"extraFloat10,omitempty"` // Extra float field 10
	// Extended text fields for custom data
	ExtraText1  string `protobuf:"bytes,94,opt,name=extraText1,proto3" json:"extraText1,omitempty"`    // Extra text field 1
	ExtraText2  string `protobuf:"bytes,95,opt,name=extraText2,proto3" json:"extraText2,omitempty"`    // Extra text field 2
	ExtraText3  string `protobuf:"bytes,96,opt,name=extraText3,proto3" json:"extraText3,omitempty"`    // Extra text field 3
	ExtraText4  string `protobuf:"bytes,97,opt,name=extraText4,proto3" json:"extraText4,omitempty"`    // Extra text field 4
	ExtraText5  string `protobuf:"bytes,98,opt,name=extraText5,proto3" json:"extraText5,omitempty"`    // Extra text field 5
	ExtraText6  string `protobuf:"bytes,99,opt,name=extraText6,proto3" json:"extraText6,omitempty"`    // Extra text field 6
	ExtraText7  string `protobuf:"bytes,100,opt,name=extraText7,proto3" json:"extraText7,omitempty"`   // Extra text field 7
	ExtraText8  string `protobuf:"bytes,101,opt,name=extraText8,proto3" json:"extraText8,omitempty"`   // Extra text field 8
	ExtraText9  string `protobuf:"bytes,102,opt,name=extraText9,proto3" json:"extraText9,omitempty"`   // Extra text field 9
	ExtraText10 string `protobuf:"bytes,103,opt,name=extraText10,proto3" json:"extraText10,omitempty"` // Extra text field 10
	// Additional temperature sensors
	Temp1  float32 `protobuf:"fixed32,104,opt,name=temp1,proto3" json:"temp1,omitempty"`   // Temperature sensor 1
	Temp2  float32 `protobuf:"fixed32,105,opt,name=temp2,proto3" json:"temp2,omitempty"`   // Temperature sensor 2
	Temp3  float32 `protobuf:"fixed32,106,opt,name=temp3,proto3" json:"temp3,omitempty"`   // Temperature sensor 3
	Temp4  float32 `protobuf:"fixed32,107,opt,name=temp4,proto3" json:"temp4,omitempty"`   // Temperature sensor 4
	Temp5  float32 `protobuf:"fixed32,108,opt,name=temp5,proto3" json:"temp5,omitempty"`   // Temperature sensor 5
	Temp6  float32 `protobuf:"fixed32,109,opt,name=temp6,proto3" json:"temp6,omitempty"`   // Temperature sensor 6
	Temp7  float32 `protobuf:"fixed32,110,opt,name=temp7,proto3" json:"temp7,omitempty"`   // Temperature sensor 7
	Temp8  float32 `protobuf:"fixed32,111,opt,name=temp8,proto3" json:"temp8,omitempty"`   // Temperature sensor 8
	Temp9  float32 `protobuf:"fixed32,112,opt,name=temp9,proto3" json:"temp9,omitempty"`   // Temperature sensor 9
	Temp10 float32 `protobuf:"fixed32,113,opt,name=temp10,proto3" json:"temp10,omitempty"` // Temperature sensor 10
	// Additional soil temperature sensors
	SoilTemp5  float32 `protobuf:"fixed32,114,opt,name=soilTemp5,proto3" json:"soilTemp5,omitempty"`   // Soil temperature sensor 5
	SoilTemp6  float32 `protobuf:"fixed32,115,opt,name=soilTemp6,proto3" json:"soilTemp6,omitempty"`   // Soil temperature sensor 6
	SoilTemp7  float32 `protobuf:"fixed32,116,opt,name=soilTemp7,proto3" json:"soilTemp7,omitempty"`   // Soil temperature sensor 7
	SoilTemp8  float32 `protobuf:"fixed32,117,opt,name=soilTemp8,proto3" json:"soilTemp8,omitempty"`   // Soil temperature sensor 8
	SoilTemp9  float32 `protobuf:"fixed32,118,opt,name=soilTemp9,proto3" json:"soilTemp9,omitempty"`   // Soil temperature sensor 9
	SoilTemp10 float32 `protobuf:"fixed32,119,opt,name=soilTemp10,proto3" json:"soilTemp10,omitempty"` // Soil temperature sensor 10
	// Additional humidity sensors
	Humidity1  float32 `protobuf:"fixed32,120,opt,name=humidity1,proto3" json:"humidity1,omitempty"`   // Humidity sensor 1
	Humidity2  float32 `protobuf:"fixed32,121,opt,name=humidity2,proto3" json:"humidity2,omitempty"`   // Humidity sensor 2
	Humidity3  float32 `protobuf:"fixed32,122,opt,name=humidity3,proto3" json:"humidity3,omitempty"`   // Humidity sensor 3
	Humidity4  float32 `protobuf:"fixed32,123,opt,name=humidity4,proto3" json:"humidity4,omitempty"`   // Humidity sensor 4
	Humidity5  float32 `protobuf:"fixed32,124,opt,name=humidity5,proto3" json:"humidity5,omitempty"`   // Humidity sensor 5
	Humidity6  float32 `protobuf:"fixed32,125,opt,name=humidity6,proto3" json:"humidity6,omitempty"`   // Humidity sensor 6
	Humidity7  float32 `protobuf:"fixed32,126,opt,name=humidity7,proto3" json:"humidity7,omitempty"`   // Humidity sensor 7
	Humidity8  float32 `protobuf:"fixed32,127,opt,name=humidity8,proto3" json:"humidity8,omitempty"`   // Humidity sensor 8
	Humidity9  float32 `protobuf:"fixed32,128,opt,name=humidity9,proto3" json:"humidity9,omitempty"`   // Humidity sensor 9
	Humidity10 float32 `protobuf:"fixed32,129,opt,name=humidity10,proto3" json:"humidity10,omitempty"` // Humidity sensor 10
	// Soil humidity sensors
	SoilHum1  float32 `protobuf:"fixed32,130,opt,name=soilHum1,proto3" json:"soilHum1,omitempty"`   // Soil humidity sensor 1
	SoilHum2  float32 `protobuf:"fixed32,131,opt,name=soilHum2,proto3" json:"soilHum2,omitempty"`   // Soil humidity sensor 2
	SoilHum3  float32 `protobuf:"fixed32,132,opt,name=soilHum3,proto3" json:"soilHum3,omitempty"`   // Soil humidity sensor 3
	SoilHum4  float32 `protobuf:"fixed32,133,opt,name=soilHum4,proto3" json:"soilHum4,omitempty"`   // Soil humidity sensor 4
	SoilHum5  float32 `protobuf:"fixed32,134,opt,name=soilHum5,proto3" json:"soilHum5,omitempty"`   // Soil humidity sensor 5
	SoilHum6  float32 `protobuf:"fixed32,135,opt,name=soilHum6,proto3" json:"soilHum6,omitempty"`   // Soil humidity sensor 6
	SoilHum7  float32 `protobuf:"fixed32,136,opt,name=soilHum7,proto3" json:"soilHum7,omitempty"`   // Soil humidity sensor 7
	SoilHum8  float32 `protobuf:"fixed32,137,opt,name=soilHum8,proto3" json:"soilHum8,omitempty"`   // Soil humidity sensor 8
	SoilHum9  float32 `protobuf:"fixed32,138,opt,name=soilHum9,proto3" json:"soilHum9,omitempty"`   // Soil humidity sensor 9
	SoilHum10 float32 `protobuf:"fixed32,139,opt,name=soilHum10,proto3" json:"soilHum10,omitempty"` // Soil humidity sensor 10
	// Additional leaf wetness sensors
	LeafWetness5 float32 `protobuf:"fixed32,140,opt,name=leafWetness5,proto3" json:"leafWetness5,omitempty"` // Leaf wetness sensor 5
	LeafWetness6 float32 `protobuf:"fixed32,141,opt,name=leafWetness6,proto3" json:"leafWetness6,omitempty"` // Leaf wetness sensor 6
	LeafWetness7 float32 `protobuf:"fixed32,142,opt,name=leafWetness7,proto3" json:"leafWetness7,omitempty"` // Leaf wetness sensor 7
	LeafWetness8 float32 `protobuf:"fixed32,143,opt,name=leafWetness8,proto3" json:"leafWetness8,omitempty"` // Leaf wetness sensor 8
	// Soil tension sensors
	SoilTens1 float32 `protobuf:"fixed32,144,opt,name=soilTens1,proto3" json:"soilTens1,omitempty"` // Soil tension sensor 1
	SoilTens2 float32 `protobuf:"fixed32,145,opt,name=soilTens2,proto3" json:"soilTens2,omitempty"` // Soil tension sensor 2
	SoilTens3 float32 `protobuf:"fixed32,146,opt,name=soilTens3,proto3" json:"soilTens3,omitempty"` // Soil tension sensor 3
	SoilTens4 float32 `protobuf:"fixed32,147,opt,name=soilTens4,proto3" json:"soilTens4,omitempty"` // Soil tension sensor 4
	// Agricultural measurements
	Gdd  int32   `protobuf:"varint,148,opt,name=gdd,proto3" json:"gdd,omitempty"`    // Growing degree days
	Etos float32 `protobuf:"fixed32,149,opt,name=etos,proto3" json:"etos,omitempty"` // Evapotranspiration short
	Etrs float32 `protobuf:"fixed32,150,opt,name=etrs,proto3" json:"etrs,omitempty"` // Evapotranspiration tall
	// Leak detection sensors
	Leak1 uint32 `protobuf:"varint,151,opt,name=leak1,proto3" json:"leak1,omitempty"` // Leak sensor 1 (0=OK, 1=LEAK, 2=OFFLINE)
	Leak2 uint32 `protobuf:"varint,152,opt,name=leak2,proto3" json:"leak2,omitempty"` // Leak sensor 2
	Leak3 uint32 `protobuf:"varint,153,opt,name=leak3,proto3" json:"leak3,omitempty"` // Leak sensor 3
	Leak4 uint32 `protobuf:"varint,154,opt,name=leak4,proto3" json:"leak4,omitempty"` // Leak sensor 4
	// Additional battery status
	BattOut         uint32 `protobuf:"varint,155,opt,name=battOut,proto3" json:"battOut,omitempty"`                 // Outdoor battery status
	BattIn          uint32 `protobuf:"varint,156,opt,name=battIn,proto3" json:"battIn,omitempty"`                   // Indoor battery status
	Batt1           uint32 `protobuf:"varint,157,opt,name=batt1,proto3" json:"batt1,omitempty"`                     // Battery sensor 1
	Batt2           uint32 `protobuf:"varint,158,opt,name=batt2,proto3" json:"batt2,omitempty"`                     // Battery sensor 2
	Batt3           uint32 `protobuf:"varint,159,opt,name=batt3,proto3" json:"batt3,omitempty"`                     // Battery sensor 3
	Batt4           uint32 `protobuf:"varint,160,opt,name=batt4,proto3" json:"batt4,omitempty"`                     // Battery sensor 4
	Batt5           uint32 `protobuf:"varint,161,opt,name=batt5,proto3" json:"batt5,omitempty"`                     // Battery sensor 5
	Batt6           uint32 `protobuf:"varint,162,opt,name=batt6,proto3" json:"batt6,omitempty"`                     // Battery sensor 6
	Batt7           uint32 `protobuf:"varint,163,opt,name=batt7,proto3" json:"batt7,omitempty"`                     // Battery sensor 7
	Batt8           uint32 `protobuf:"varint,164,opt,name=batt8,proto3" json:"batt8,omitempty"`                     // Battery sensor 8
	Batt9           uint32 `protobuf:"varint,165,opt,name=batt9,proto3" json:"batt9,omitempty"`                     // Battery sensor 9
	Batt10          uint32 `protobuf:"varint,166,opt,name=batt10,proto3" json:"batt10,omitempty"`                   // Battery sensor 10
	Batt25          uint32 `protobuf:"varint,167,opt,name=batt25,proto3" json:"batt25,omitempty"`                   // PM2.5 battery status
	BattLightning   uint32 `protobuf:"varint,168,opt,name=battLightning,proto3" json:"battLightning,omitempty"`     // Lightning detector battery
	BatLeak1        uint32 `protobuf:"varint,169,opt,name=batLeak1,proto3" json:"batLeak1,omitempty"`               // Leak detector 1 battery
	BatLeak2        uint32 `protobuf:"varint,170,opt,name=batLeak2,proto3" json:"batLeak2,omitempty"`               // Leak detector 2 battery
	BatLeak3        uint32 `protobuf:"varint,171,opt,name=batLeak3,proto3" json:"batLeak3,omitempty"`               // Leak detector 3 battery
	BatLeak4        uint32 `protobuf:"varint,172,opt,name=batLeak4,proto3" json:"batLeak4,omitempty"`               // Leak detector 4 battery
	BattSM1         uint32 `protobuf:"varint,173,opt,name=battSM1,proto3" json:"battSM1,omitempty"`                 // Soil moisture 1 battery
	BattSM2         uint32 `protobuf:"varint,174,opt,name=battSM2,proto3" json:"battSM2,omitempty"`                 // Soil moisture 2 battery
	BattSM3         uint32 `protobuf:"varint,175,opt,name=battSM3,proto3" json:"battSM3,omitempty"`                 // Soil moisture 3 battery
	BattSM4         uint32 `protobuf:"varint,176,opt,name=battSM4,proto3" json:"battSM4,omitempty"`                 // Soil moisture 4 battery
	BattCO2         uint32 `protobuf:"varint,177,opt,name=battCO2,proto3" json:"battCO2,omitempty"`                 // CO2 sensor battery
	BattCellGateway uint32 `protobuf:"varint,178,opt,name=battCellGateway,proto3" json:"battCellGateway,omitempty"` // Cellular gateway battery
	// Pressure measurements
	BaromRelIn float32 `protobuf:"fixed32,179,opt,name=baromRelIn,proto3" json:"baromRelIn,omitempty"` // Relative pressure in inHg
	BaromAbsIn float32 `protobuf:"fixed32,180,opt,name=baromAbsIn,proto3" json:"baromAbsIn,omitempty"` // Absolute pressure in inHg
	// Relay states
	Relay1  uint32 `protobuf:"varint,181,opt,name=relay1,proto3" json:"relay1,omitempty"`   // Relay 1 state (0 or 1)
	Relay2  uint32 `protobuf:"varint,182,opt,name=relay2,proto3" json:"relay2,omitempty"`   // Relay 2 state
	Relay3  uint32 `protobuf:"varint,183,opt,name=relay3,proto3" json:"relay3,omitempty"`   // Relay 3 state
	Relay4  uint32 `protobuf:"varint,184,opt,name=relay4,proto3" json:"relay4,omitempty"`   // Relay 4 state
	Relay5  uint32 `protobuf:"varint,185,opt,name=relay5,proto3" json:"relay5,omitempty"`   // Relay 5 state
	Relay6  uint32 `protobuf:"varint,186,opt,name=relay6,proto3" json:"relay6,omitempty"`   // Relay 6 state
	Relay7  uint32 `protobuf:"varint,187,opt,name=relay7,proto3" json:"relay7,omitempty"`   // Relay 7 state
	Relay8  uint32 `protobuf:"varint,193,opt,name=relay8,proto3" json:"relay8,omitempty"`   // Relay 8 state
	Relay9  uint32 `protobuf:"varint,194,opt,name=relay9,proto3" json:"relay9,omitempty"`   // Relay 9 state
	Relay10 uint32 `protobuf:"varint,195,opt,name=relay10,proto3" json:"relay10,omitempty"` // Relay 10 state
	// Air quality measurements
	Pm25             float32 `protobuf:"fixed32,196,opt,name=pm25,proto3" json:"pm25,omitempty"`                        // PM2.5 outdoor
	Pm25_24H         float32 `protobuf:"fixed32,197,opt,name=pm25_24h,json=pm2524h,proto3" json:"pm25_24h,omitempty"`   // PM2.5 outdoor 24h average
	Pm25In           float32 `protobuf:"fixed32,198,opt,name=pm25In,proto3" json:"pm25In,omitempty"`                    // PM2.5 indoor
	Pm25In24H        float32 `protobuf:"fixed32,199,opt,name=pm25In24h,proto3" json:"pm25In24h,omitempty"`              // PM2.5 indoor 24h average
	Pm25InAQIN       float32 `protobuf:"fixed32,200,opt,name=pm25InAQIN,proto3" json:"pm25InAQIN,omitempty"`            // PM2.5 indoor AQIN sensor
	Pm25In24HAQIN    float32 `protobuf:"fixed32,201,opt,name=pm25In24hAQIN,proto3" json:"pm25In24hAQIN,omitempty"`      // PM2.5 indoor 24h AQIN
	Pm10InAQIN       float32 `protobuf:"fixed32,202,opt,name=pm10InAQIN,proto3" json:"pm10InAQIN,omitempty"`            // PM10 indoor AQIN sensor
	Pm10In24HAQIN    float32 `protobuf:"fixed32,203,opt,name=pm10In24hAQIN,proto3" json:"pm10In24hAQIN,omitempty"`      // PM10 indoor 24h AQIN
	Co2              float32 `protobuf:"fixed32,204,opt,name=co2,proto3" json:"co2,omitempty"`                          // CO2 level in ppm
	Co2InAQIN        int32   `protobuf:"varint,205,opt,name=co2InAQIN,proto3" json:"co2InAQIN,omitempty"`               // CO2 indoor AQIN
	Co2In24HAQIN     int32   `protobuf:"varint,206,opt,name=co2In24hAQIN,proto3" json:"co2In24hAQIN,omitempty"`         // CO2 indoor 24h AQIN
	PmInTempAQIN     float32 `protobuf:"fixed32,207,opt,name=pmInTempAQIN,proto3" json:"pmInTempAQIN,omitempty"`        // PM sensor temperature AQIN
	PmInHumidityAQIN int32   `protobuf:"varint,208,opt,name=pmInHumidityAQIN,proto3" json:"pmInHumidityAQIN,omitempty"` // PM sensor humidity AQIN
	AqiPM25AQIN      int32   `protobuf:"varint,209,opt,name=aqiPM25AQIN,proto3" json:"aqiPM25AQIN,omitempty"`           // AQI from PM2.5 AQIN
	AqiPM2524HAQIN   int32   `protobuf:"varint,210,opt,name=aqiPM2524hAQIN,proto3" json:"aqiPM2524hAQIN,omitempty"`     // AQI from PM2.5 24h AQIN
	AqiPM10AQIN      int32   `protobuf:"varint,211,opt,name=aqiPM10AQIN,proto3" json:"aqiPM10AQIN,omitempty"`           // AQI from PM10 AQIN
	AqiPM1024HAQIN   int32   `protobuf:"varint,212,opt,name=aqiPM1024hAQIN,proto3" json:"aqiPM1024hAQIN,omitempty"`     // AQI from PM10 24h AQIN
	AqiPM25In        int32   `protobuf:"varint,213,opt,name=aqiPM25In,proto3" json:"aqiPM25In,omitempty"`               // AQI from PM2.5 indoor
	AqiPM25In24H     int32   `protobuf:"varint,214,opt,name=aqiPM25In24h,proto3" json:"aqiPM25In24h,omitempty"`         // AQI from PM2.5 indoor 24h
	// Lightning data
	LightningDay      int32                  `protobuf:"varint,215,opt,name=lightningDay,proto3" json:"lightningDay,omitempty"`            // Lightning strikes today
	LightningHour     int32                  `protobuf:"varint,216,opt,name=lightningHour,proto3" json:"lightningHour,omitempty"`          // Lightning strikes this hour
	LightningTime     *timestamppb.Timestamp `protobuf:"bytes,217,opt,name=lightningTime,proto3" json:"lightningTime,omitempty"`           // Last lightning strike time
	LightningDistance float32                `protobuf:"fixed32,218,opt,name=lightningDistance,proto3" json:"lightningDistance,omitempty"` // Last lightning distance in miles
	// Time zone and timestamp
	Tz      string `protobuf:"bytes,219,opt,name=tz,proto3" json:"tz,omitempty"`            // IANA time zone
	DateUTC int64  `protobuf:"varint,220,opt,name=dateUTC,proto3" json:"dateUTC,omitempty"` // UTC timestamp in milliseconds
	// Remote station identification
	StationId string `protobuf:"bytes,221,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"` // UUID for remote stations
}

func (x *WeatherReading) Reset() {
	*x = WeatherReading{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeatherReading) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherReading) ProtoMessage() {}

func (x *WeatherReading) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherReading.ProtoReflect.Descriptor instead.
func (*WeatherReading) Descriptor() ([]byte, []int) {
	return file_protocols_remoteweather_remoteweather_proto_rawDescGZIP(), []int{4}
}

func (x *WeatherReading) GetReadingTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReadingTimestamp
	}
	return nil
}

func (x *WeatherReading) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

func (x *WeatherReading) GetStationType() string {
	if x != nil {
		return x.StationType
	}
	return ""
}

func (x *WeatherReading) GetStationLatitude() float64 {
	if x != nil {
		return x.StationLatitude
	}
	return 0
}

func (x *WeatherReading) GetStationLongitude() float64 {
	if x != nil {
		return x.StationLongitude
	}
	return 0
}

func (x *WeatherReading) GetStationAltitude() float64 {
	if x != nil {
		return x.StationAltitude
	}
	return 0
}

func (x *WeatherReading) GetAprsEnabled() bool {
	if x != nil {
		return x.AprsEnabled
	}
	return false
}

func (x *WeatherReading) GetAprsCallsign() string {
	if x != nil {
		return x.AprsCallsign
	}
	return ""
}

func (x *WeatherReading) GetBarometer() float32 {
	if x != nil {
		return x.Barometer
	}
	return 0
}

func (x *WeatherReading) GetInsideTemperature() float32 {
	if x != nil {
		return x.InsideTemperature
	}
	return 0
}

func (x *WeatherReading) GetInsideHumidity() float32 {
	if x != nil {
		return x.InsideHumidity
	}
	return 0
}

func (x *WeatherReading) GetOutsideTemperature() float32 {
	if x != nil {
		return x.OutsideTemperature
	}
	return 0
}

func (x *WeatherReading) GetOutsideHumidity() float32 {
	if x != nil {
		return x.OutsideHumidity
	}
	return 0
}

func (x *WeatherReading) GetWindSpeed() float32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *WeatherReading) GetWindSpeed10() float32 {
	if x != nil {
		return x.WindSpeed10
	}
	return 0
}

func (x *WeatherReading) GetWindDirection() float32 {
	if x != nil {
		return x.WindDirection
	}
	return 0
}

func (x *WeatherReading) GetWindChill() float32 {
	if x != nil {
		return x.WindChill
	}
	return 0
}

func (x *WeatherReading) GetHeatIndex() float32 {
	if x != nil {
		return x.HeatIndex
	}
	return 0
}

func (x *WeatherReading) GetExtraTemp1() float32 {
	if x != nil {
		return x.ExtraTemp1
	}
	return 0
}

func (x *WeatherReading) GetExtraTemp2() float32 {
	if x != nil {
		return x.ExtraTemp2
	}
	return 0
}

func (x *WeatherReading) GetExtraTemp3() float32 {
	if x != nil {
		return x.ExtraTemp3
	}
	return 0
}

func (x *WeatherReading) GetExtraTemp4() float32 {
	if x != nil {
		return x.ExtraTemp4
	}
	return 0
}

func (x *WeatherReading) GetExtraTemp5() float32 {
	if x != nil {
		return x.ExtraTemp5
	}
	return 0
}

func (x *WeatherReading) GetExtraTemp6() float32 {
	if x != nil {
		return x.ExtraTemp6
	}
	return 0
}

func (x *WeatherReading) GetExtraTemp7() float32 {
	if x != nil {
		return x.ExtraTemp7
	}
	return 0
}

func (x *WeatherReading) GetSoilTemp1() float32 {
	if x != nil {
		return x.SoilTemp1
	}
	return 0
}

func (x *WeatherReading) GetSoilTemp2() float32 {
	if x != nil {
		return x.SoilTemp2
	}
	return 0
}

func (x *WeatherReading) GetSoilTemp3() float32 {
	if x != nil {
		return x.SoilTemp3
	}
	return 0
}

func (x *WeatherReading) GetSoilTemp4() float32 {
	if x != nil {
		return x.SoilTemp4
	}
	return 0
}

func (x *WeatherReading) GetLeafTemp1() float32 {
	if x != nil {
		return x.LeafTemp1
	}
	return 0
}

func (x *WeatherReading) GetLeafTemp2() float32 {
	if x != nil {
		return x.LeafTemp2
	}
	return 0
}

func (x *WeatherReading) GetLeafTemp3() float32 {
	if x != nil {
		return x.LeafTemp3
	}
	return 0
}

func (x *WeatherReading) GetLeafTemp4() float32 {
	if x != nil {
		return x.LeafTemp4
	}
	return 0
}

func (x *WeatherReading) GetExtraHumidity1() float32 {
	if x != nil {
		return x.ExtraHumidity1
	}
	return 0
}

func (x *WeatherReading) GetExtraHumidity2() float32 {
	if x != nil {
		return x.ExtraHumidity2
	}
	return 0
}

func (x *WeatherReading) GetExtraHumidity3() float32 {
	if x != nil {
		return x.ExtraHumidity3
	}
	return 0
}

func (x *WeatherReading) GetExtraHumidity4() float32 {
	if x != nil {
		return x.ExtraHumidity4
	}
	return 0
}

func (x *WeatherReading) GetExtraHumidity5() float32 {
	if x != nil {
		return x.ExtraHumidity5
	}
	return 0
}

func (x *WeatherReading) GetExtraHumidity6() float32 {
	if x != nil {
		return x.ExtraHumidity6
	}
	return 0
}

func (x *WeatherReading) GetExtraHumidity7() float32 {
	if x != nil {
		return x.ExtraHumidity7
	}
	return 0
}

func (x *WeatherReading) GetRainRate() float32 {
	if x != nil {
		return x.RainRate
	}
	return 0
}

func (x *WeatherReading) GetRainIncremental() float32 {
	if x != nil {
		return x.RainIncremental
	}
	return 0
}

func (x *WeatherReading) GetStormRain() float32 {
	if x != nil {
		return x.StormRain
	}
	return 0
}

func (x *WeatherReading) GetStormStart() *timestamppb.Timestamp {
	if x != nil {
		return x.StormStart
	}
	return nil
}

func (x *WeatherReading) GetDayRain() float32 {
	if x != nil {
		return x.DayRain
	}
	return 0
}

func (x *WeatherReading) GetMonthRain() float32 {
	if x != nil {
		return x.MonthRain
	}
	return 0
}

func (x *WeatherReading) GetYearRain() float32 {
	if x != nil {
		return x.YearRain
	}
	return 0
}

func (x *WeatherReading) GetSolarWatts() float32 {
	if x != nil {
		return x.SolarWatts
	}
	return 0
}

func (x *WeatherReading) GetPotentialSolarWatts() float32 {
	if x != nil {
		return x.PotentialSolarWatts
	}
	return 0
}

func (x *WeatherReading) GetSolarJoules() float32 {
	if x != nil {
		return x.SolarJoules
	}
	return 0
}

func (x *WeatherReading) GetUv() float32 {
	if x != nil {
		return x.Uv
	}
	return 0
}

func (x *WeatherReading) GetRadiation() float32 {
	if x != nil {
		return x.Radiation
	}
	return 0
}

func (x *WeatherReading) GetDayET() float32 {
	if x != nil {
		return x.DayET
	}
	return 0
}

func (x *WeatherReading) GetMonthET() float32 {
	if x != nil {
		return x.MonthET
	}
	return 0
}

func (x *WeatherReading) GetYearET() float32 {
	if x != nil {
		return x.YearET
	}
	return 0
}

func (x *WeatherReading) GetSoilMoisture1() float32 {
	if x != nil {
		return x.SoilMoisture1
	}
	return 0
}

func (x *WeatherReading) GetSoilMoisture2() float32 {
	if x != nil {
		return x.SoilMoisture2
	}
	return 0
}

func (x *WeatherReading) GetSoilMoisture3() float32 {
	if x != nil {
		return x.SoilMoisture3
	}
	return 0
}

func (x *WeatherReading) GetSoilMoisture4() float32 {
	if x != nil {
		return x.SoilMoisture4
	}
	return 0
}

func (x *WeatherReading) GetLeafWetness1() float32 {
	if x != nil {
		return x.LeafWetness1
	}
	return 0
}

func (x *WeatherReading) GetLeafWetness2() float32 {
	if x != nil {
		return x.LeafWetness2
	}
	return 0
}

func (x *WeatherReading) GetLeafWetness3() float32 {
	if x != nil {
		return x.LeafWetness3
	}
	return 0
}

func (x *WeatherReading) GetLeafWetness4() float32 {
	if x != nil {
		return x.LeafWetness4
	}
	return 0
}

func (x *WeatherReading) GetInsideAlarm() uint32 {
	if x != nil {
		return x.InsideAlarm
	}
	return 0
}

func (x *WeatherReading) GetRainAlarm() uint32 {
	if x != nil {
		return x.RainAlarm
	}
	return 0
}

func (x *WeatherReading) GetOutsideAlarm1() uint32 {
	if x != nil {
		return x.OutsideAlarm1
	}
	return 0
}

func (x *WeatherReading) GetOutsideAlarm2() uint32 {
	if x != nil {
		return x.OutsideAlarm2
	}
	return 0
}

func (x *WeatherReading) GetExtraAlarm1() uint32 {
	if x != nil {
		return x.ExtraAlarm1
	}
	return 0
}

func (x *WeatherReading) GetExtraAlarm2() uint32 {
	if x != nil {
		return x.ExtraAlarm2
	}
	return 0
}

func (x *WeatherReading) GetExtraAlarm3() uint32 {
	if x != nil {
		return x.ExtraAlarm3
	}
	return 0
}

func (x *WeatherReading) GetExtraAlarm4() uint32 {
	if x != nil {
		return x.ExtraAlarm4
	}
	return 0
}

func (x *WeatherReading) GetExtraAlarm5() uint32 {
	if x != nil {
		return x.ExtraAlarm5
	}
	return 0
}

func (x *WeatherReading) GetExtraAlarm6() uint32 {
	if x != nil {
		return x.ExtraAlarm6
	}
	return 0
}

func (x *WeatherReading) GetExtraAlarm7() uint32 {
	if x != nil {
		return x.ExtraAlarm7
	}
	return 0
}

func (x *WeatherReading) GetExtraAlarm8() uint32 {
	if x != nil {
		return x.ExtraAlarm8
	}
	return 0
}

func (x *WeatherReading) GetSoilLeafAlarm1() uint32 {
	if x != nil {
		return x.SoilLeafAlarm1
	}
	return 0
}

func (x *WeatherReading) GetSoilLeafAlarm2() uint32 {
	if x != nil {
		return x.SoilLeafAlarm2
	}
	return 0
}

func (x *WeatherReading) GetSoilLeafAlarm3() uint32 {
	if x != nil {
		return x.SoilLeafAlarm3
	}
	return 0
}

func (x *WeatherReading) GetSoilLeafAlarm4() uint32 {
	if x != nil {
		return x.SoilLeafAlarm4
	}
	return 0
}

func (x *WeatherReading) GetTxBatteryStatus() uint32 {
	if x != nil {
		return x.TxBatteryStatus
	}
	return 0
}

func (x *WeatherReading) GetConsBatteryVoltage() float32 {
	if x != nil {
		return x.ConsBatteryVoltage
	}
	return 0
}

func (x *WeatherReading) GetStationBatteryVoltage() float32 {
	if x != nil {
		return x.StationBatteryVoltage
	}
	return 0
}

func (x *WeatherReading) GetForecastIcon() uint32 {
	if x != nil {
		return x.ForecastIcon
	}
	return 0
}

func (x *WeatherReading) GetForecastRule() uint32 {
	if x != nil {
		return x.ForecastRule
	}
	return 0
}

func (x *WeatherReading) GetSunrise() *timestamppb.Timestamp {
	if x != nil {
		return x.Sunrise
	}
	return nil
}

func (x *WeatherReading) GetSunset() *timestamppb.Timestamp {
	if x != nil {
		return x.Sunset
	}
	return nil
}

func (x *WeatherReading) GetSnowDistance() float32 {
	if x != nil {
		return x.SnowDistance
	}
	return 0
}

func (x *WeatherReading) GetSnowDepth() float32 {
	if x != nil {
		return x.SnowDepth
	}
	return 0
}

func (x *WeatherReading) GetExtraFloat1() float32 {
	if x != nil {
		return x.ExtraFloat1
	}
	return 0
}

func (x *WeatherReading) GetExtraFloat2() float32 {
	if x != nil {
		return x.ExtraFloat2
	}
	return 0
}

func (x *WeatherReading) GetExtraFloat3() float32 {
	if x != nil {
		return x.ExtraFloat3
	}
	return 0
}

func (x *WeatherReading) GetExtraFloat4() float32 {
	if x != nil {
		return x.ExtraFloat4
	}
	return 0
}

func (x *WeatherReading) GetExtraFloat5() float32 {
	if x != nil {
		return x.ExtraFloat5
	}
	return 0
}

func (x *WeatherReading) GetExtraFloat6() float32 {
	if x != nil {
		return x.ExtraFloat6
	}
	return 0
}

func (x *WeatherReading) GetExtraFloat7() float32 {
	if x != nil {
		return x.ExtraFloat7
	}
	return 0
}

func (x *WeatherReading) GetExtraFloat8() float32 {
	if x != nil {
		return x.ExtraFloat8
	}
	return 0
}

func (x *WeatherReading) GetExtraFloat9() float32 {
	if x != nil {
		return x.ExtraFloat9
	}
	return 0
}

func (x *WeatherReading) GetExtraFloat10() float32 {
	if x != nil {
		return x.ExtraFloat10
	}
	return 0
}

func (x *WeatherReading) GetExtraText1() string {
	if x != nil {
		return x.ExtraText1
	}
	return ""
}

func (x *WeatherReading) GetExtraText2() string {
	if x != nil {
		return x.ExtraText2
	}
	return ""
}

func (x *WeatherReading) GetExtraText3() string {
	if x != nil {
		return x.ExtraText3
	}
	return ""
}

func (x *WeatherReading) GetExtraText4() string {
	if x != nil {
		return x.ExtraText4
	}
	return ""
}

func (x *WeatherReading) GetExtraText5() string {
	if x != nil {
		return x.ExtraText5
	}
	return ""
}

func (x *WeatherReading) GetExtraText6() string {
	if x != nil {
		return x.ExtraText6
	}
	return ""
}

func (x *WeatherReading) GetExtraText7() string {
	if x != nil {
		return x.ExtraText7
	}
	return ""
}

func (x *WeatherReading) GetExtraText8() string {
	if x != nil {
		return x.ExtraText8
	}
	return ""
}

func (x *WeatherReading) GetExtraText9() string {
	if x != nil {
		return x.ExtraText9
	}
	return ""
}

func (x *WeatherReading) GetExtraText10() string {
	if x != nil {
		return x.ExtraText10
	}
	return ""
}

func (x *WeatherReading) GetTemp1() float32 {
	if x != nil {
		return x.Temp1
	}
	return 0
}

func (x *WeatherReading) GetTemp2() float32 {
	if x != nil {
		return x.Temp2
	}
	return 0
}

func (x *WeatherReading) GetTemp3() float32 {
	if x != nil {
		return x.Temp3
	}
	return 0
}

func (x *WeatherReading) GetTemp4() float32 {
	if x != nil {
		return x.Temp4
	}
	return 0
}

func (x *WeatherReading) GetTemp5() float32 {
	if x != nil {
		return x.Temp5
	}
	return 0
}

func (x *WeatherReading) GetTemp6() float32 {
	if x != nil {
		return x.Temp6
	}
	return 0
}

func (x *WeatherReading) GetTemp7() float32 {
	if x != nil {
		return x.Temp7
	}
	return 0
}

func (x *WeatherReading) GetTemp8() float32 {
	if x != nil {
		return x.Temp8
	}
	return 0
}

func (x *WeatherReading) GetTemp9() float32 {
	if x != nil {
		return x.Temp9
	}
	return 0
}

func (x *WeatherReading) GetTemp10() float32 {
	if x != nil {
		return x.Temp10
	}
	return 0
}

func (x *WeatherReading) GetSoilTemp5() float32 {
	if x != nil {
		return x.SoilTemp5
	}
	return 0
}

func (x *WeatherReading) GetSoilTemp6() float32 {
	if x != nil {
		return x.SoilTemp6
	}
	return 0
}

func (x *WeatherReading) GetSoilTemp7() float32 {
	if x != nil {
		return x.SoilTemp7
	}
	return 0
}

func (x *WeatherReading) GetSoilTemp8() float32 {
	if x != nil {
		return x.SoilTemp8
	}
	return 0
}

func (x *WeatherReading) GetSoilTemp9() float32 {
	if x != nil {
		return x.SoilTemp9
	}
	return 0
}

func (x *WeatherReading) GetSoilTemp10() float32 {
	if x != nil {
		return x.SoilTemp10
	}
	return 0
}

func (x *WeatherReading) GetHumidity1() float32 {
	if x != nil {
		return x.Humidity1
	}
	return 0
}

func (x *WeatherReading) GetHumidity2() float32 {
	if x != nil {
		return x.Humidity2
	}
	return 0
}

func (x *WeatherReading) GetHumidity3() float32 {
	if x != nil {
		return x.Humidity3
	}
	return 0
}

func (x *WeatherReading) GetHumidity4() float32 {
	if x != nil {
		return x.Humidity4
	}
	return 0
}

func (x *WeatherReading) GetHumidity5() float32 {
	if x != nil {
		return x.Humidity5
	}
	return 0
}

func (x *WeatherReading) GetHumidity6() float32 {
	if x != nil {
		return x.Humidity6
	}
	return 0
}

func (x *WeatherReading) GetHumidity7() float32 {
	if x != nil {
		return x.Humidity7
	}
	return 0
}

func (x *WeatherReading) GetHumidity8() float32 {
	if x != nil {
		return x.Humidity8
	}
	return 0
}

func (x *WeatherReading) GetHumidity9() float32 {
	if x != nil {
		return x.Humidity9
	}
	return 0
}

func (x *WeatherReading) GetHumidity10() float32 {
	if x != nil {
		return x.Humidity10
	}
	return 0
}

func (x *WeatherReading) GetSoilHum1() float32 {
	if x != nil {
		return x.SoilHum1
	}
	return 0
}

func (x *WeatherReading) GetSoilHum2() float32 {
	if x != nil {
		return x.SoilHum2
	}
	return 0
}

func (x *WeatherReading) GetSoilHum3() float32 {
	if x != nil {
		return x.SoilHum3
	}
	return 0
}

func (x *WeatherReading) GetSoilHum4() float32 {
	if x != nil {
		return x.SoilHum4
	}
	return 0
}

func (x *WeatherReading) GetSoilHum5() float32 {
	if x != nil {
		return x.SoilHum5
	}
	return 0
}

func (x *WeatherReading) GetSoilHum6() float32 {
	if x != nil {
		return x.SoilHum6
	}
	return 0
}

func (x *WeatherReading) GetSoilHum7() float32 {
	if x != nil {
		return x.SoilHum7
	}
	return 0
}

func (x *WeatherReading) GetSoilHum8() float32 {
	if x != nil {
		return x.SoilHum8
	}
	return 0
}

func (x *WeatherReading) GetSoilHum9() float32 {
	if x != nil {
		return x.SoilHum9
	}
	return 0
}

func (x *WeatherReading) GetSoilHum10() float32 {
	if x != nil {
		return x.SoilHum10
	}
	return 0
}

func (x *WeatherReading) GetLeafWetness5() float32 {
	if x != nil {
		return x.LeafWetness5
	}
	return 0
}

func (x *WeatherReading) GetLeafWetness6() float32 {
	if x != nil {
		return x.LeafWetness6
	}
	return 0
}

func (x *WeatherReading) GetLeafWetness7() float32 {
	if x != nil {
		return x.LeafWetness7
	}
	return 0
}

func (x *WeatherReading) GetLeafWetness8() float32 {
	if x != nil {
		return x.LeafWetness8
	}
	return 0
}

func (x *WeatherReading) GetSoilTens1() float32 {
	if x != nil {
		return x.SoilTens1
	}
	return 0
}

func (x *WeatherReading) GetSoilTens2() float32 {
	if x != nil {
		return x.SoilTens2
	}
	return 0
}

func (x *WeatherReading) GetSoilTens3() float32 {
	if x != nil {
		return x.SoilTens3
	}
	return 0
}

func (x *WeatherReading) GetSoilTens4() float32 {
	if x != nil {
		return x.SoilTens4
	}
	return 0
}

func (x *WeatherReading) GetGdd() int32 {
	if x != nil {
		return x.Gdd
	}
	return 0
}

func (x *WeatherReading) GetEtos() float32 {
	if x != nil {
		return x.Etos
	}
	return 0
}

func (x *WeatherReading) GetEtrs() float32 {
	if x != nil {
		return x.Etrs
	}
	return 0
}

func (x *WeatherReading) GetLeak1() uint32 {
	if x != nil {
		return x.Leak1
	}
	return 0
}

func (x *WeatherReading) GetLeak2() uint32 {
	if x != nil {
		return x.Leak2
	}
	return 0
}

func (x *WeatherReading) GetLeak3() uint32 {
	if x != nil {
		return x.Leak3
	}
	return 0
}

func (x *WeatherReading) GetLeak4() uint32 {
	if x != nil {
		return x.Leak4
	}
	return 0
}

func (x *WeatherReading) GetBattOut() uint32 {
	if x != nil {
		return x.BattOut
	}
	return 0
}

func (x *WeatherReading) GetBattIn() uint32 {
	if x != nil {
		return x.BattIn
	}
	return 0
}

func (x *WeatherReading) GetBatt1() uint32 {
	if x != nil {
		return x.Batt1
	}
	return 0
}

func (x *WeatherReading) GetBatt2() uint32 {
	if x != nil {
		return x.Batt2
	}
	return 0
}

func (x *WeatherReading) GetBatt3() uint32 {
	if x != nil {
		return x.Batt3
	}
	return 0
}

func (x *WeatherReading) GetBatt4() uint32 {
	if x != nil {
		return x.Batt4
	}
	return 0
}

func (x *WeatherReading) GetBatt5() uint32 {
	if x != nil {
		return x.Batt5
	}
	return 0
}

func (x *WeatherReading) GetBatt6() uint32 {
	if x != nil {
		return x.Batt6
	}
	return 0
}

func (x *WeatherReading) GetBatt7() uint32 {
	if x != nil {
		return x.Batt7
	}
	return 0
}

func (x *WeatherReading) GetBatt8() uint32 {
	if x != nil {
		return x.Batt8
	}
	return 0
}

func (x *WeatherReading) GetBatt9() uint32 {
	if x != nil {
		return x.Batt9
	}
	return 0
}

func (x *WeatherReading) GetBatt10() uint32 {
	if x != nil {
		return x.Batt10
	}
	return 0
}

func (x *WeatherReading) GetBatt25() uint32 {
	if x != nil {
		return x.Batt25
	}
	return 0
}

func (x *WeatherReading) GetBattLightning() uint32 {
	if x != nil {
		return x.BattLightning
	}
	return 0
}

func (x *WeatherReading) GetBatLeak1() uint32 {
	if x != nil {
		return x.BatLeak1
	}
	return 0
}

func (x *WeatherReading) GetBatLeak2() uint32 {
	if x != nil {
		return x.BatLeak2
	}
	return 0
}

func (x *WeatherReading) GetBatLeak3() uint32 {
	if x != nil {
		return x.BatLeak3
	}
	return 0
}

func (x *WeatherReading) GetBatLeak4() uint32 {
	if x != nil {
		return x.BatLeak4
	}
	return 0
}

func (x *WeatherReading) GetBattSM1() uint32 {
	if x != nil {
		return x.BattSM1
	}
	return 0
}

func (x *WeatherReading) GetBattSM2() uint32 {
	if x != nil {
		return x.BattSM2
	}
	return 0
}

func (x *WeatherReading) GetBattSM3() uint32 {
	if x != nil {
		return x.BattSM3
	}
	return 0
}

func (x *WeatherReading) GetBattSM4() uint32 {
	if x != nil {
		return x.BattSM4
	}
	return 0
}

func (x *WeatherReading) GetBattCO2() uint32 {
	if x != nil {
		return x.BattCO2
	}
	return 0
}

func (x *WeatherReading) GetBattCellGateway() uint32 {
	if x != nil {
		return x.BattCellGateway
	}
	return 0
}

func (x *WeatherReading) GetBaromRelIn() float32 {
	if x != nil {
		return x.BaromRelIn
	}
	return 0
}

func (x *WeatherReading) GetBaromAbsIn() float32 {
	if x != nil {
		return x.BaromAbsIn
	}
	return 0
}

func (x *WeatherReading) GetRelay1() uint32 {
	if x != nil {
		return x.Relay1
	}
	return 0
}

func (x *WeatherReading) GetRelay2() uint32 {
	if x != nil {
		return x.Relay2
	}
	return 0
}

func (x *WeatherReading) GetRelay3() uint32 {
	if x != nil {
		return x.Relay3
	}
	return 0
}

func (x *WeatherReading) GetRelay4() uint32 {
	if x != nil {
		return x.Relay4
	}
	return 0
}

func (x *WeatherReading) GetRelay5() uint32 {
	if x != nil {
		return x.Relay5
	}
	return 0
}

func (x *WeatherReading) GetRelay6() uint32 {
	if x != nil {
		return x.Relay6
	}
	return 0
}

func (x *WeatherReading) GetRelay7() uint32 {
	if x != nil {
		return x.Relay7
	}
	return 0
}

func (x *WeatherReading) GetRelay8() uint32 {
	if x != nil {
		return x.Relay8
	}
	return 0
}

func (x *WeatherReading) GetRelay9() uint32 {
	if x != nil {
		return x.Relay9
	}
	return 0
}

func (x *WeatherReading) GetRelay10() uint32 {
	if x != nil {
		return x.Relay10
	}
	return 0
}

func (x *WeatherReading) GetPm25() float32 {
	if x != nil {
		return x.Pm25
	}
	return 0
}

func (x *WeatherReading) GetPm25_24H() float32 {
	if x != nil {
		return x.Pm25_24H
	}
	return 0
}

func (x *WeatherReading) GetPm25In() float32 {
	if x != nil {
		return x.Pm25In
	}
	return 0
}

func (x *WeatherReading) GetPm25In24H() float32 {
	if x != nil {
		return x.Pm25In24H
	}
	return 0
}

func (x *WeatherReading) GetPm25InAQIN() float32 {
	if x != nil {
		return x.Pm25InAQIN
	}
	return 0
}

func (x *WeatherReading) GetPm25In24HAQIN() float32 {
	if x != nil {
		return x.Pm25In24HAQIN
	}
	return 0
}

func (x *WeatherReading) GetPm10InAQIN() float32 {
	if x != nil {
		return x.Pm10InAQIN
	}
	return 0
}

func (x *WeatherReading) GetPm10In24HAQIN() float32 {
	if x != nil {
		return x.Pm10In24HAQIN
	}
	return 0
}

func (x *WeatherReading) GetCo2() float32 {
	if x != nil {
		return x.Co2
	}
	return 0
}

func (x *WeatherReading) GetCo2InAQIN() int32 {
	if x != nil {
		return x.Co2InAQIN
	}
	return 0
}

func (x *WeatherReading) GetCo2In24HAQIN() int32 {
	if x != nil {
		return x.Co2In24HAQIN
	}
	return 0
}

func (x *WeatherReading) GetPmInTempAQIN() float32 {
	if x != nil {
		return x.PmInTempAQIN
	}
	return 0
}

func (x *WeatherReading) GetPmInHumidityAQIN() int32 {
	if x != nil {
		return x.PmInHumidityAQIN
	}
	return 0
}

func (x *WeatherReading) GetAqiPM25AQIN() int32 {
	if x != nil {
		return x.AqiPM25AQIN
	}
	return 0
}

func (x *WeatherReading) GetAqiPM2524HAQIN() int32 {
	if x != nil {
		return x.AqiPM2524HAQIN
	}
	return 0
}

func (x *WeatherReading) GetAqiPM10AQIN() int32 {
	if x != nil {
		return x.AqiPM10AQIN
	}
	return 0
}

func (x *WeatherReading) GetAqiPM1024HAQIN() int32 {
	if x != nil {
		return x.AqiPM1024HAQIN
	}
	return 0
}

func (x *WeatherReading) GetAqiPM25In() int32 {
	if x != nil {
		return x.AqiPM25In
	}
	return 0
}

func (x *WeatherReading) GetAqiPM25In24H() int32 {
	if x != nil {
		return x.AqiPM25In24H
	}
	return 0
}

func (x *WeatherReading) GetLightningDay() int32 {
	if x != nil {
		return x.LightningDay
	}
	return 0
}

func (x *WeatherReading) GetLightningHour() int32 {
	if x != nil {
		return x.LightningHour
	}
	return 0
}

func (x *WeatherReading) GetLightningTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LightningTime
	}
	return nil
}

func (x *WeatherReading) GetLightningDistance() float32 {
	if x != nil {
		return x.LightningDistance
	}
	return 0
}

func (x *WeatherReading) GetTz() string {
	if x != nil {
		return x.Tz
	}
	return ""
}

func (x *WeatherReading) GetDateUTC() int64 {
	if x != nil {
		return x.DateUTC
	}
	return 0
}

func (x *WeatherReading) GetStationId() string {
	if x != nil {
		return x.StationId
	}
	return ""
}

// Remote station registration configuration
type RemoteStationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StationId   string `protobuf:"bytes,1,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"` // Empty for new registration, UUID for re-registration
	StationName string `protobuf:"bytes,2,opt,name=station_name,json=stationName,proto3" json:"station_name,omitempty"`
	StationType string `protobuf:"bytes,3,opt,name=station_type,json=stationType,proto3" json:"station_type,omitempty"`
	// APRS configuration
	AprsEnabled  bool   `protobuf:"varint,4,opt,name=aprs_enabled,json=aprsEnabled,proto3" json:"aprs_enabled,omitempty"`
	AprsCallsign string `protobuf:"bytes,5,opt,name=aprs_callsign,json=aprsCallsign,proto3" json:"aprs_callsign,omitempty"`
	AprsPassword string `protobuf:"bytes,6,opt,name=aprs_password,json=aprsPassword,proto3" json:"aprs_password,omitempty"`
	// Weather Underground configuration
	WuEnabled   bool   `protobuf:"varint,7,opt,name=wu_enabled,json=wuEnabled,proto3" json:"wu_enabled,omitempty"`
	WuStationId string `protobuf:"bytes,8,opt,name=wu_station_id,json=wuStationId,proto3" json:"wu_station_id,omitempty"`
	WuApiKey    string `protobuf:"bytes,9,opt,name=wu_api_key,json=wuApiKey,proto3" json:"wu_api_key,omitempty"`
	// Aeris configuration
	AerisEnabled      bool   `protobuf:"varint,10,opt,name=aeris_enabled,json=aerisEnabled,proto3" json:"aeris_enabled,omitempty"`
	AerisClientId     string `protobuf:"bytes,11,opt,name=aeris_client_id,json=aerisClientId,proto3" json:"aeris_client_id,omitempty"`
	AerisClientSecret string `protobuf:"bytes,12,opt,name=aeris_client_secret,json=aerisClientSecret,proto3" json:"aeris_client_secret,omitempty"`
	// PWS Weather configuration
	PwsEnabled   bool   `protobuf:"varint,13,opt,name=pws_enabled,json=pwsEnabled,proto3" json:"pws_enabled,omitempty"`
	PwsStationId string `protobuf:"bytes,14,opt,name=pws_station_id,json=pwsStationId,proto3" json:"pws_station_id,omitempty"`
	PwsPassword  string `protobuf:"bytes,15,opt,name=pws_password,json=pwsPassword,proto3" json:"pws_password,omitempty"`
}

func (x *RemoteStationConfig) Reset() {
	*x = RemoteStationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteStationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteStationConfig) ProtoMessage() {}

func (x *RemoteStationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteStationConfig.ProtoReflect.Descriptor instead.
func (*RemoteStationConfig) Descriptor() ([]byte, []int) {
	return file_protocols_remoteweather_remoteweather_proto_rawDescGZIP(), []int{5}
}

func (x *RemoteStationConfig) GetStationId() string {
	if x != nil {
		return x.StationId
	}
	return ""
}

func (x *RemoteStationConfig) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

func (x *RemoteStationConfig) GetStationType() string {
	if x != nil {
		return x.StationType
	}
	return ""
}

func (x *RemoteStationConfig) GetAprsEnabled() bool {
	if x != nil {
		return x.AprsEnabled
	}
	return false
}

func (x *RemoteStationConfig) GetAprsCallsign() string {
	if x != nil {
		return x.AprsCallsign
	}
	return ""
}

func (x *RemoteStationConfig) GetAprsPassword() string {
	if x != nil {
		return x.AprsPassword
	}
	return ""
}

func (x *RemoteStationConfig) GetWuEnabled() bool {
	if x != nil {
		return x.WuEnabled
	}
	return false
}

func (x *RemoteStationConfig) GetWuStationId() string {
	if x != nil {
		return x.WuStationId
	}
	return ""
}

func (x *RemoteStationConfig) GetWuApiKey() string {
	if x != nil {
		return x.WuApiKey
	}
	return ""
}

func (x *RemoteStationConfig) GetAerisEnabled() bool {
	if x != nil {
		return x.AerisEnabled
	}
	return false
}

func (x *RemoteStationConfig) GetAerisClientId() string {
	if x != nil {
		return x.AerisClientId
	}
	return ""
}

func (x *RemoteStationConfig) GetAerisClientSecret() string {
	if x != nil {
		return x.AerisClientSecret
	}
	return ""
}

func (x *RemoteStationConfig) GetPwsEnabled() bool {
	if x != nil {
		return x.PwsEnabled
	}
	return false
}

func (x *RemoteStationConfig) GetPwsStationId() string {
	if x != nil {
		return x.PwsStationId
	}
	return ""
}

func (x *RemoteStationConfig) GetPwsPassword() string {
	if x != nil {
		return x.PwsPassword
	}
	return ""
}

// Registration acknowledgment
type RegistrationAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success   bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	StationId string `protobuf:"bytes,2,opt,name=station_id,json=stationId,proto3" json:"station_id,omitempty"` // UUID assigned by server
	Message   string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                      // Error or success message
}

func (x *RegistrationAck) Reset() {
	*x = RegistrationAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationAck) ProtoMessage() {}

func (x *RegistrationAck) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationAck.ProtoReflect.Descriptor instead.
func (*RegistrationAck) Descriptor() ([]byte, []int) {
	return file_protocols_remoteweather_remoteweather_proto_rawDescGZIP(), []int{6}
}

func (x *RegistrationAck) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegistrationAck) GetStationId() string {
	if x != nil {
		return x.StationId
	}
	return ""
}

func (x *RegistrationAck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_remoteweather_remoteweather_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protocols_remoteweather_remoteweather_proto_rawDescGZIP(), []int{7}
}

var File_protocols_remoteweather_remoteweather_proto protoreflect.FileDescriptor

var file_protocols_remoteweather_remoteweather_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x12,
	0x4c, 0x69, 0x76, 0x65, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x12, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x53,
	0x70, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x70,
	0x61, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x70, 0x61,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x14, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x70, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x70, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x29,
	0x0a, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x07, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xf6, 0x37, 0x0a, 0x0e, 0x57, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x10,
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x10, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xbc, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x61,
	0x70, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x61, 0x70, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0c, 0x61, 0x70, 0x72, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x18, 0xc0,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x72, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x69, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x48,
	0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x31, 0x30, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x31,
	0x30, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x64, 0x43,
	0x68, 0x69, 0x6c, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x64,
	0x43, 0x68, 0x69, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x65, 0x61, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65,
	0x6d, 0x70, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65,
	0x6d, 0x70, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x33, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65,
	0x6d, 0x70, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x34, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65,
	0x6d, 0x70, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x35, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65,
	0x6d, 0x70, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x36, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65,
	0x6d, 0x70, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x37, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x54, 0x65,
	0x6d, 0x70, 0x37, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x31,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x31, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x32, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x32, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x33, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x33, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x34, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x65, 0x61, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6c, 0x65, 0x61, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x61,
	0x66, 0x54, 0x65, 0x6d, 0x70, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x65,
	0x61, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x54,
	0x65, 0x6d, 0x70, 0x33, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x66,
	0x54, 0x65, 0x6d, 0x70, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x54, 0x65, 0x6d,
	0x70, 0x34, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x66, 0x54, 0x65,
	0x6d, 0x70, 0x34, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x31, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x32, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x33, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x33, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x34, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x34, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x35, 0x18, 0x21, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x35, 0x12, 0x26, 0x0a, 0x0e, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x36, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x36, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x37, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x37, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x61, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72,
	0x61, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x61, 0x69, 0x6e, 0x49,
	0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x72, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x69, 0x6e, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x52, 0x61, 0x69, 0x6e, 0x12,
	0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x61, 0x79, 0x52, 0x61, 0x69, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x64, 0x61,
	0x79, 0x52, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x61,
	0x69, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x52,
	0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x79, 0x65, 0x61, 0x72, 0x52, 0x61, 0x69, 0x6e, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x79, 0x65, 0x61, 0x72, 0x52, 0x61, 0x69, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x57, 0x61, 0x74, 0x74, 0x73, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x57, 0x61, 0x74, 0x74, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x61,
	0x72, 0x57, 0x61, 0x74, 0x74, 0x73, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x6f, 0x6c, 0x61, 0x72, 0x57, 0x61, 0x74, 0x74,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x4a, 0x6f, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x6f, 0x6c, 0x61, 0x72, 0x4a, 0x6f, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x76, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x02, 0x75, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72, 0x61, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x79, 0x45, 0x54, 0x18, 0x30, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x64, 0x61, 0x79, 0x45, 0x54, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6e, 0x74, 0x68,
	0x45, 0x54, 0x18, 0x31, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x45,
	0x54, 0x12, 0x16, 0x0a, 0x06, 0x79, 0x65, 0x61, 0x72, 0x45, 0x54, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x79, 0x65, 0x61, 0x72, 0x45, 0x54, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x69,
	0x6c, 0x4d, 0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65, 0x31, 0x18, 0x33, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x73, 0x6f, 0x69, 0x6c, 0x4d, 0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65, 0x31, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x69, 0x6c, 0x4d, 0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65, 0x32,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x6f, 0x69, 0x6c, 0x4d, 0x6f, 0x69, 0x73,
	0x74, 0x75, 0x72, 0x65, 0x32, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x69, 0x6c, 0x4d, 0x6f, 0x69,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x33, 0x18, 0x35, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x6f,
	0x69, 0x6c, 0x4d, 0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65, 0x33, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x6f, 0x69, 0x6c, 0x4d, 0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65, 0x34, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x73, 0x6f, 0x69, 0x6c, 0x4d, 0x6f, 0x69, 0x73, 0x74, 0x75, 0x72, 0x65,
	0x34, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x31, 0x18, 0x37, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x31, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x32, 0x18, 0x38, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x65, 0x61,
	0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x32, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x65, 0x61,
	0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x33, 0x18, 0x39, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x33, 0x12, 0x22, 0x0a,
	0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x34, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x34, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x31, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x31, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x32, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x32, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x31, 0x18, 0x3f, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x31, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x32, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x32, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x33,
	0x18, 0x41, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x61,
	0x72, 0x6d, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x34, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x35, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x36, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x36, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x37, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x37, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x38, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x38, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x6f, 0x69, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x31, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x69, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x31, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x69, 0x6c, 0x4c, 0x65, 0x61,
	0x66, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x32, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x6f, 0x69, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x32, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x6f, 0x69, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x33, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6f, 0x69, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x33, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x6f, 0x69, 0x6c, 0x4c, 0x65, 0x61,
	0x66, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x34, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x6f, 0x69, 0x6c, 0x4c, 0x65, 0x61, 0x66, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x34, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x78, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x4b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x78, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x18, 0x4d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x18, 0x4e, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x63, 0x6f,
	0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x73, 0x75, 0x6e, 0x72, 0x69, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x75, 0x6e, 0x73, 0x65, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x73, 0x75, 0x6e, 0x73, 0x65, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x53, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6e, 0x6f, 0x77, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31,
	0x18, 0x54, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x32, 0x18, 0x55, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x33, 0x18, 0x56, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x18, 0x57, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x35, 0x18, 0x58, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x35, 0x12, 0x20, 0x0a, 0x0b, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x18, 0x59, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x12, 0x20, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x37, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x37, 0x12,
	0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x38, 0x18, 0x5b,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x38, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x39,
	0x18, 0x5c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x39, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x31, 0x30, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x31, 0x30, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x65, 0x78, 0x74, 0x31, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x65, 0x78, 0x74, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x65, 0x78, 0x74, 0x32, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x65, 0x78, 0x74, 0x32, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x65, 0x78, 0x74, 0x33, 0x18, 0x60, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x65, 0x78, 0x74, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x65, 0x78, 0x74, 0x34, 0x18, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x65, 0x78, 0x74, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x65, 0x78, 0x74, 0x35, 0x18, 0x62, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x65, 0x78, 0x74, 0x35, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x65, 0x78, 0x74, 0x36, 0x18, 0x63, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x65, 0x78, 0x74, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x65, 0x78, 0x74, 0x37, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x65, 0x78, 0x74, 0x37, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x65, 0x78, 0x74, 0x38, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x65, 0x78, 0x74, 0x38, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x65, 0x78, 0x74, 0x39, 0x18, 0x66, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x54, 0x65, 0x78, 0x74, 0x39, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x54, 0x65, 0x78, 0x74, 0x31, 0x30, 0x18, 0x67, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x54, 0x65, 0x78, 0x74, 0x31, 0x30, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d,
	0x70, 0x31, 0x18, 0x68, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x31, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x32, 0x18, 0x69, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x74, 0x65, 0x6d, 0x70, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x33, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x33, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x65, 0x6d, 0x70, 0x34, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70,
	0x34, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x35, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x35, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x36,
	0x18, 0x6d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x36, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x65, 0x6d, 0x70, 0x37, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x65,
	0x6d, 0x70, 0x37, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x38, 0x18, 0x6f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x38, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6d,
	0x70, 0x39, 0x18, 0x70, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x65, 0x6d, 0x70, 0x39, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x65, 0x6d, 0x70, 0x31, 0x30, 0x18, 0x71, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x74, 0x65, 0x6d, 0x70, 0x31, 0x30, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x35, 0x18, 0x72, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c,
	0x54, 0x65, 0x6d, 0x70, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x36, 0x18, 0x73, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x36, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x37,
	0x18, 0x74, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x37, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x38, 0x18, 0x75,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x38, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x39, 0x18, 0x76, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x39, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x31, 0x30, 0x18, 0x77, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x31, 0x30, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x31, 0x18, 0x78, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x31, 0x12, 0x1c, 0x0a, 0x09, 0x68,
	0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x32, 0x18, 0x79, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x75, 0x6d,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x33, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x75,
	0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x33, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x34, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x34, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x35, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x35, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x36,
	0x18, 0x7d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x36, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x37, 0x18, 0x7e,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x37, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x38, 0x18, 0x7f, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x38, 0x12, 0x1d, 0x0a,
	0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x39, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x39, 0x12, 0x1f, 0x0a, 0x0a,
	0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x31, 0x30, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x31, 0x30, 0x12, 0x1b, 0x0a,
	0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x31, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x31, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x6f,
	0x69, 0x6c, 0x48, 0x75, 0x6d, 0x32, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73,
	0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x32, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48,
	0x75, 0x6d, 0x33, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x69, 0x6c,
	0x48, 0x75, 0x6d, 0x33, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x34,
	0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d,
	0x34, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x35, 0x18, 0x86, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x35, 0x12, 0x1b,
	0x0a, 0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x36, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x36, 0x12, 0x1b, 0x0a, 0x08, 0x73,
	0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x37, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x37, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x6f, 0x69, 0x6c,
	0x48, 0x75, 0x6d, 0x38, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x69,
	0x6c, 0x48, 0x75, 0x6d, 0x38, 0x12, 0x1b, 0x0a, 0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d,
	0x39, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75,
	0x6d, 0x39, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x31, 0x30, 0x18,
	0x8b, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x48, 0x75, 0x6d, 0x31,
	0x30, 0x12, 0x23, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x35, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x35, 0x12, 0x23, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x36, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c,
	0x65, 0x61, 0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x36, 0x12, 0x23, 0x0a, 0x0c, 0x6c,
	0x65, 0x61, 0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x37, 0x18, 0x8e, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x37,
	0x12, 0x23, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x38,
	0x18, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x66, 0x57, 0x65, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x38, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6e,
	0x73, 0x31, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54,
	0x65, 0x6e, 0x73, 0x31, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6e, 0x73,
	0x32, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65,
	0x6e, 0x73, 0x32, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6e, 0x73, 0x33,
	0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6e,
	0x73, 0x33, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6e, 0x73, 0x34, 0x18,
	0x93, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6f, 0x69, 0x6c, 0x54, 0x65, 0x6e, 0x73,
	0x34, 0x12, 0x11, 0x0a, 0x03, 0x67, 0x64, 0x64, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x67, 0x64, 0x64, 0x12, 0x13, 0x0a, 0x04, 0x65, 0x74, 0x6f, 0x73, 0x18, 0x95, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x65, 0x74, 0x6f, 0x73, 0x12, 0x13, 0x0a, 0x04, 0x65, 0x74, 0x72,
	0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x65, 0x74, 0x72, 0x73, 0x12, 0x15,
	0x0a, 0x05, 0x6c, 0x65, 0x61, 0x6b, 0x31, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x65, 0x61, 0x6b, 0x31, 0x12, 0x15, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x6b, 0x32, 0x18, 0x98,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x6b, 0x32, 0x12, 0x15, 0x0a, 0x05,
	0x6c, 0x65, 0x61, 0x6b, 0x33, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65,
	0x61, 0x6b, 0x33, 0x12, 0x15, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x6b, 0x34, 0x18, 0x9a, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x6b, 0x34, 0x12, 0x19, 0x0a, 0x07, 0x62, 0x61,
	0x74, 0x74, 0x4f, 0x75, 0x74, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x74, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x62, 0x61, 0x74, 0x74, 0x49, 0x6e, 0x18,
	0x9c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x61, 0x74, 0x74, 0x49, 0x6e, 0x12, 0x15,
	0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x31, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x62, 0x61, 0x74, 0x74, 0x31, 0x12, 0x15, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x32, 0x18, 0x9e,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x32, 0x12, 0x15, 0x0a, 0x05,
	0x62, 0x61, 0x74, 0x74, 0x33, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x61,
	0x74, 0x74, 0x33, 0x12, 0x15, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x34, 0x18, 0xa0, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x34, 0x12, 0x15, 0x0a, 0x05, 0x62, 0x61,
	0x74, 0x74, 0x35, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74,
	0x35, 0x12, 0x15, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x36, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x36, 0x12, 0x15, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74,
	0x37, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x37, 0x12,
	0x15, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x38, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x62, 0x61, 0x74, 0x74, 0x38, 0x12, 0x15, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x39, 0x18,
	0xa5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x39, 0x12, 0x17, 0x0a,
	0x06, 0x62, 0x61, 0x74, 0x74, 0x31, 0x30, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x62, 0x61, 0x74, 0x74, 0x31, 0x30, 0x12, 0x17, 0x0a, 0x06, 0x62, 0x61, 0x74, 0x74, 0x32, 0x35,
	0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x61, 0x74, 0x74, 0x32, 0x35, 0x12,
	0x25, 0x0a, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x4c, 0x65, 0x61,
	0x6b, 0x31, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x74, 0x4c, 0x65,
	0x61, 0x6b, 0x31, 0x12, 0x1b, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x32, 0x18,
	0xaa, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x32,
	0x12, 0x1b, 0x0a, 0x08, 0x62, 0x61, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x33, 0x18, 0xab, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x62, 0x61, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x33, 0x12, 0x1b, 0x0a,
	0x08, 0x62, 0x61, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x34, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x62, 0x61, 0x74, 0x4c, 0x65, 0x61, 0x6b, 0x34, 0x12, 0x19, 0x0a, 0x07, 0x62, 0x61,
	0x74, 0x74, 0x53, 0x4d, 0x31, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61,
	0x74, 0x74, 0x53, 0x4d, 0x31, 0x12, 0x19, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x53, 0x4d, 0x32,
	0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x53, 0x4d, 0x32,
	0x12, 0x19, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x53, 0x4d, 0x33, 0x18, 0xaf, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x53, 0x4d, 0x33, 0x12, 0x19, 0x0a, 0x07, 0x62,
	0x61, 0x74, 0x74, 0x53, 0x4d, 0x34, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x61, 0x74, 0x74, 0x53, 0x4d, 0x34, 0x12, 0x19, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74, 0x43, 0x4f,
	0x32, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x43, 0x4f,
	0x32, 0x12, 0x29, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x61, 0x74,
	0x74, 0x43, 0x65, 0x6c, 0x6c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0a,
	0x62, 0x61, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6c, 0x49, 0x6e, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x6c, 0x49, 0x6e, 0x12, 0x1f, 0x0a,
	0x0a, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x41, 0x62, 0x73, 0x49, 0x6e, 0x18, 0xb4, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x72, 0x6f, 0x6d, 0x41, 0x62, 0x73, 0x49, 0x6e, 0x12, 0x17,
	0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x31, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x31, 0x12, 0x17, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x32, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x32,
	0x12, 0x17, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x33, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x33, 0x12, 0x17, 0x0a, 0x06, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x34, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x34, 0x12, 0x17, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x35, 0x18, 0xb9, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x35, 0x12, 0x17, 0x0a, 0x06, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x36, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x36, 0x12, 0x17, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x37, 0x18, 0xbb,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x37, 0x12, 0x17, 0x0a,
	0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x38, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x38, 0x12, 0x17, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x39,
	0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x39, 0x12,
	0x19, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x31, 0x30, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x31, 0x30, 0x12, 0x13, 0x0a, 0x04, 0x70, 0x6d,
	0x32, 0x35, 0x18, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x70, 0x6d, 0x32, 0x35, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6d, 0x32, 0x35, 0x5f, 0x32, 0x34, 0x68, 0x18, 0xc5, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x70, 0x6d, 0x32, 0x35, 0x32, 0x34, 0x68, 0x12, 0x17, 0x0a, 0x06, 0x70,
	0x6d, 0x32, 0x35, 0x49, 0x6e, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x6d,
	0x32, 0x35, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x6d, 0x32, 0x35, 0x49, 0x6e, 0x32, 0x34,
	0x68, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x6d, 0x32, 0x35, 0x49, 0x6e,
	0x32, 0x34, 0x68, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x6d, 0x32, 0x35, 0x49, 0x6e, 0x41, 0x51, 0x49,
	0x4e, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x6d, 0x32, 0x35, 0x49, 0x6e,
	0x41, 0x51, 0x49, 0x4e, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x6d, 0x32, 0x35, 0x49, 0x6e, 0x32, 0x34,
	0x68, 0x41, 0x51, 0x49, 0x4e, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x6d,
	0x32, 0x35, 0x49, 0x6e, 0x32, 0x34, 0x68, 0x41, 0x51, 0x49, 0x4e, 0x12, 0x1f, 0x0a, 0x0a, 0x70,
	0x6d, 0x31, 0x30, 0x49, 0x6e, 0x41, 0x51, 0x49, 0x4e, 0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x70, 0x6d, 0x31, 0x30, 0x49, 0x6e, 0x41, 0x51, 0x49, 0x4e, 0x12, 0x25, 0x0a, 0x0d,
	0x70, 0x6d, 0x31, 0x30, 0x49, 0x6e, 0x32, 0x34, 0x68, 0x41, 0x51, 0x49, 0x4e, 0x18, 0xcb, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x70, 0x6d, 0x31, 0x30, 0x49, 0x6e, 0x32, 0x34, 0x68, 0x41,
	0x51, 0x49, 0x4e, 0x12, 0x11, 0x0a, 0x03, 0x63, 0x6f, 0x32, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x63, 0x6f, 0x32, 0x12, 0x1d, 0x0a, 0x09, 0x63, 0x6f, 0x32, 0x49, 0x6e, 0x41,
	0x51, 0x49, 0x4e, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x32, 0x49,
	0x6e, 0x41, 0x51, 0x49, 0x4e, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x6f, 0x32, 0x49, 0x6e, 0x32, 0x34,
	0x68, 0x41, 0x51, 0x49, 0x4e, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f,
	0x32, 0x49, 0x6e, 0x32, 0x34, 0x68, 0x41, 0x51, 0x49, 0x4e, 0x12, 0x23, 0x0a, 0x0c, 0x70, 0x6d,
	0x49, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x51, 0x49, 0x4e, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x70, 0x6d, 0x49, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x51, 0x49, 0x4e, 0x12,
	0x2b, 0x0a, 0x10, 0x70, 0x6d, 0x49, 0x6e, 0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x41,
	0x51, 0x49, 0x4e, 0x18, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x70, 0x6d, 0x49, 0x6e,
	0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x41, 0x51, 0x49, 0x4e, 0x12, 0x21, 0x0a, 0x0b,
	0x61, 0x71, 0x69, 0x50, 0x4d, 0x32, 0x35, 0x41, 0x51, 0x49, 0x4e, 0x18, 0xd1, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x61, 0x71, 0x69, 0x50, 0x4d, 0x32, 0x35, 0x41, 0x51, 0x49, 0x4e, 0x12,
	0x27, 0x0a, 0x0e, 0x61, 0x71, 0x69, 0x50, 0x4d, 0x32, 0x35, 0x32, 0x34, 0x68, 0x41, 0x51, 0x49,
	0x4e, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x71, 0x69, 0x50, 0x4d, 0x32,
	0x35, 0x32, 0x34, 0x68, 0x41, 0x51, 0x49, 0x4e, 0x12, 0x21, 0x0a, 0x0b, 0x61, 0x71, 0x69, 0x50,
	0x4d, 0x31, 0x30, 0x41, 0x51, 0x49, 0x4e, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x61, 0x71, 0x69, 0x50, 0x4d, 0x31, 0x30, 0x41, 0x51, 0x49, 0x4e, 0x12, 0x27, 0x0a, 0x0e, 0x61,
	0x71, 0x69, 0x50, 0x4d, 0x31, 0x30, 0x32, 0x34, 0x68, 0x41, 0x51, 0x49, 0x4e, 0x18, 0xd4, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61, 0x71, 0x69, 0x50, 0x4d, 0x31, 0x30, 0x32, 0x34, 0x68,
	0x41, 0x51, 0x49, 0x4e, 0x12, 0x1d, 0x0a, 0x09, 0x61, 0x71, 0x69, 0x50, 0x4d, 0x32, 0x35, 0x49,
	0x6e, 0x18, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x71, 0x69, 0x50, 0x4d, 0x32,
	0x35, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x61, 0x71, 0x69, 0x50, 0x4d, 0x32, 0x35, 0x49, 0x6e,
	0x32, 0x34, 0x68, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x71, 0x69, 0x50,
	0x4d, 0x32, 0x35, 0x49, 0x6e, 0x32, 0x34, 0x68, 0x12, 0x23, 0x0a, 0x0c, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x79, 0x12, 0x25, 0x0a,
	0x0d, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x18, 0xd8,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67,
	0x48, 0x6f, 0x75, 0x72, 0x12, 0x41, 0x0a, 0x0d, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x18, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xda, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x11, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0f, 0x0a, 0x02, 0x74, 0x7a, 0x18, 0xdb, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x7a, 0x12, 0x19, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x54, 0x43, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x54, 0x43, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0xaf, 0x04, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x70, 0x72, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x70, 0x72, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x72, 0x73, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x70, 0x72, 0x73, 0x43,
	0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x72, 0x73, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x70, 0x72, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x77, 0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x77, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x77,
	0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x75, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x0a, 0x77, 0x75, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x75, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x65, 0x72, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x65, 0x72, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x65, 0x72, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x65, 0x72,
	0x69, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x65,
	0x72, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x65, 0x72, 0x69, 0x73, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x77,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x70, 0x77, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x77, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x77, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x77, 0x73, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x64, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x32, 0xf4, 0x02, 0x0a, 0x09, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x56,
	0x31, 0x12, 0x32, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0f, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x41, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x1a, 0x10, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x13, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x53, 0x70, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x57, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x73,
	0x70, 0x61, 0x6e, 0x2f, 0x7b, 0x73, 0x70, 0x61, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x7d, 0x12, 0x56, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x61, 0x74,
	0x68, 0x65, 0x72, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x68, 0x72, 0x69, 0x73, 0x73, 0x6e,
	0x65, 0x6c, 0x6c, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x2f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protocols_remoteweather_remoteweather_proto_rawDescOnce sync.Once
	file_protocols_remoteweather_remoteweather_proto_rawDescData = file_protocols_remoteweather_remoteweather_proto_rawDesc
)

func file_protocols_remoteweather_remoteweather_proto_rawDescGZIP() []byte {
	file_protocols_remoteweather_remoteweather_proto_rawDescOnce.Do(func() {
		file_protocols_remoteweather_remoteweather_proto_rawDescData = protoimpl.X.CompressGZIP(file_protocols_remoteweather_remoteweather_proto_rawDescData)
	})
	return file_protocols_remoteweather_remoteweather_proto_rawDescData
}

var file_protocols_remoteweather_remoteweather_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protocols_remoteweather_remoteweather_proto_goTypes = []any{
	(*LiveWeatherRequest)(nil),    // 0: LiveWeatherRequest
	(*WeatherSpanRequest)(nil),    // 1: WeatherSpanRequest
	(*LatestReadingRequest)(nil),  // 2: LatestReadingRequest
	(*WeatherSpan)(nil),           // 3: WeatherSpan
	(*WeatherReading)(nil),        // 4: WeatherReading
	(*RemoteStationConfig)(nil),   // 5: RemoteStationConfig
	(*RegistrationAck)(nil),       // 6: RegistrationAck
	(*Empty)(nil),                 // 7: Empty
	(*durationpb.Duration)(nil),   // 8: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_protocols_remoteweather_remoteweather_proto_depIdxs = []int32{
	8,  // 0: WeatherSpanRequest.spanDuration:type_name -> google.protobuf.Duration
	9,  // 1: WeatherSpan.spanStart:type_name -> google.protobuf.Timestamp
	4,  // 2: WeatherSpan.reading:type_name -> WeatherReading
	9,  // 3: WeatherReading.readingTimestamp:type_name -> google.protobuf.Timestamp
	9,  // 4: WeatherReading.stormStart:type_name -> google.protobuf.Timestamp
	9,  // 5: WeatherReading.sunrise:type_name -> google.protobuf.Timestamp
	9,  // 6: WeatherReading.sunset:type_name -> google.protobuf.Timestamp
	9,  // 7: WeatherReading.lightningTime:type_name -> google.protobuf.Timestamp
	4,  // 8: WeatherV1.SendWeatherReadings:input_type -> WeatherReading
	5,  // 9: WeatherV1.RegisterRemoteStation:input_type -> RemoteStationConfig
	0,  // 10: WeatherV1.GetLiveWeather:input_type -> LiveWeatherRequest
	1,  // 11: WeatherV1.GetWeatherSpan:input_type -> WeatherSpanRequest
	2,  // 12: WeatherV1.GetLatestReading:input_type -> LatestReadingRequest
	7,  // 13: WeatherV1.SendWeatherReadings:output_type -> Empty
	6,  // 14: WeatherV1.RegisterRemoteStation:output_type -> RegistrationAck
	4,  // 15: WeatherV1.GetLiveWeather:output_type -> WeatherReading
	3,  // 16: WeatherV1.GetWeatherSpan:output_type -> WeatherSpan
	4,  // 17: WeatherV1.GetLatestReading:output_type -> WeatherReading
	13, // [13:18] is the sub-list for method output_type
	8,  // [8:13] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_protocols_remoteweather_remoteweather_proto_init() }
func file_protocols_remoteweather_remoteweather_proto_init() {
	if File_protocols_remoteweather_remoteweather_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protocols_remoteweather_remoteweather_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LiveWeatherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_remoteweather_remoteweather_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*WeatherSpanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_remoteweather_remoteweather_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*LatestReadingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_remoteweather_remoteweather_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*WeatherSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_remoteweather_remoteweather_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*WeatherReading); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_remoteweather_remoteweather_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RemoteStationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_remoteweather_remoteweather_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RegistrationAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protocols_remoteweather_remoteweather_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protocols_remoteweather_remoteweather_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protocols_remoteweather_remoteweather_proto_goTypes,
		DependencyIndexes: file_protocols_remoteweather_remoteweather_proto_depIdxs,
		MessageInfos:      file_protocols_remoteweather_remoteweather_proto_msgTypes,
	}.Build()
	File_protocols_remoteweather_remoteweather_proto = out.File
	file_protocols_remoteweather_remoteweather_proto_rawDesc = nil
	file_protocols_remoteweather_remoteweather_proto_goTypes = nil
	file_protocols_remoteweather_remoteweather_proto_depIdxs = nil
}
