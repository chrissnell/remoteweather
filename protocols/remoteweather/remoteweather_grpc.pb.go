// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protocols/remoteweather/remoteweather.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WeatherV1_GetLiveWeather_FullMethodName   = "/WeatherV1/GetLiveWeather"
	WeatherV1_GetWeatherSpan_FullMethodName   = "/WeatherV1/GetWeatherSpan"
	WeatherV1_GetLatestReading_FullMethodName = "/WeatherV1/GetLatestReading"
)

// WeatherV1Client is the client API for WeatherV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Weather service v1.0 - comprehensive weather data API
type WeatherV1Client interface {
	GetLiveWeather(ctx context.Context, in *LiveWeatherRequest, opts ...grpc.CallOption) (WeatherV1_GetLiveWeatherClient, error)
	GetWeatherSpan(ctx context.Context, in *WeatherSpanRequest, opts ...grpc.CallOption) (*WeatherSpan, error)
	GetLatestReading(ctx context.Context, in *LatestReadingRequest, opts ...grpc.CallOption) (*WeatherReading, error)
}

type weatherV1Client struct {
	cc grpc.ClientConnInterface
}

func NewWeatherV1Client(cc grpc.ClientConnInterface) WeatherV1Client {
	return &weatherV1Client{cc}
}

func (c *weatherV1Client) GetLiveWeather(ctx context.Context, in *LiveWeatherRequest, opts ...grpc.CallOption) (WeatherV1_GetLiveWeatherClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WeatherV1_ServiceDesc.Streams[0], WeatherV1_GetLiveWeather_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &weatherV1GetLiveWeatherClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WeatherV1_GetLiveWeatherClient interface {
	Recv() (*WeatherReading, error)
	grpc.ClientStream
}

type weatherV1GetLiveWeatherClient struct {
	grpc.ClientStream
}

func (x *weatherV1GetLiveWeatherClient) Recv() (*WeatherReading, error) {
	m := new(WeatherReading)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weatherV1Client) GetWeatherSpan(ctx context.Context, in *WeatherSpanRequest, opts ...grpc.CallOption) (*WeatherSpan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeatherSpan)
	err := c.cc.Invoke(ctx, WeatherV1_GetWeatherSpan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherV1Client) GetLatestReading(ctx context.Context, in *LatestReadingRequest, opts ...grpc.CallOption) (*WeatherReading, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeatherReading)
	err := c.cc.Invoke(ctx, WeatherV1_GetLatestReading_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherV1Server is the server API for WeatherV1 service.
// All implementations must embed UnimplementedWeatherV1Server
// for forward compatibility
//
// Weather service v1.0 - comprehensive weather data API
type WeatherV1Server interface {
	GetLiveWeather(*LiveWeatherRequest, WeatherV1_GetLiveWeatherServer) error
	GetWeatherSpan(context.Context, *WeatherSpanRequest) (*WeatherSpan, error)
	GetLatestReading(context.Context, *LatestReadingRequest) (*WeatherReading, error)
	mustEmbedUnimplementedWeatherV1Server()
}

// UnimplementedWeatherV1Server must be embedded to have forward compatible implementations.
type UnimplementedWeatherV1Server struct {
}

func (UnimplementedWeatherV1Server) GetLiveWeather(*LiveWeatherRequest, WeatherV1_GetLiveWeatherServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLiveWeather not implemented")
}
func (UnimplementedWeatherV1Server) GetWeatherSpan(context.Context, *WeatherSpanRequest) (*WeatherSpan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeatherSpan not implemented")
}
func (UnimplementedWeatherV1Server) GetLatestReading(context.Context, *LatestReadingRequest) (*WeatherReading, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestReading not implemented")
}
func (UnimplementedWeatherV1Server) mustEmbedUnimplementedWeatherV1Server() {}

// UnsafeWeatherV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherV1Server will
// result in compilation errors.
type UnsafeWeatherV1Server interface {
	mustEmbedUnimplementedWeatherV1Server()
}

func RegisterWeatherV1Server(s grpc.ServiceRegistrar, srv WeatherV1Server) {
	s.RegisterService(&WeatherV1_ServiceDesc, srv)
}

func _WeatherV1_GetLiveWeather_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LiveWeatherRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeatherV1Server).GetLiveWeather(m, &weatherV1GetLiveWeatherServer{ServerStream: stream})
}

type WeatherV1_GetLiveWeatherServer interface {
	Send(*WeatherReading) error
	grpc.ServerStream
}

type weatherV1GetLiveWeatherServer struct {
	grpc.ServerStream
}

func (x *weatherV1GetLiveWeatherServer) Send(m *WeatherReading) error {
	return x.ServerStream.SendMsg(m)
}

func _WeatherV1_GetWeatherSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherV1Server).GetWeatherSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherV1_GetWeatherSpan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherV1Server).GetWeatherSpan(ctx, req.(*WeatherSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherV1_GetLatestReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestReadingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherV1Server).GetLatestReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeatherV1_GetLatestReading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherV1Server).GetLatestReading(ctx, req.(*LatestReadingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeatherV1_ServiceDesc is the grpc.ServiceDesc for WeatherV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WeatherV1",
	HandlerType: (*WeatherV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWeatherSpan",
			Handler:    _WeatherV1_GetWeatherSpan_Handler,
		},
		{
			MethodName: "GetLatestReading",
			Handler:    _WeatherV1_GetLatestReading_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLiveWeather",
			Handler:       _WeatherV1_GetLiveWeather_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocols/remoteweather/remoteweather.proto",
}
