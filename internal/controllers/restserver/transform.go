package restserver

import (
	"github.com/chrissnell/remoteweather/internal/types"
)

// transformSpanReadings converts database readings to WeatherReading slice for JSON output
func (h *Handlers) transformSpanReadings(dbReadings *[]types.BucketReading) []*WeatherReading {
	wr := make([]*WeatherReading, 0)

	for _, r := range *dbReadings {
		wr = append(wr, &WeatherReading{
			StationName:           r.StationName,
			StationType:           r.StationType,
			ReadingTimestamp:      r.Bucket.UnixMilli(),
			OutsideTemperature:    float32ToJSONNumber(r.OutTemp),
			ExtraTemp1:            float32ToJSONNumber(r.ExtraTemp1),
			ExtraTemp2:            float32ToJSONNumber(r.ExtraTemp2),
			ExtraTemp3:            float32ToJSONNumber(r.ExtraTemp3),
			ExtraTemp4:            float32ToJSONNumber(r.ExtraTemp4),
			ExtraTemp5:            float32ToJSONNumber(r.ExtraTemp5),
			ExtraTemp6:            float32ToJSONNumber(r.ExtraTemp6),
			ExtraTemp7:            float32ToJSONNumber(r.ExtraTemp7),
			SoilTemp1:             float32ToJSONNumber(r.SoilTemp1),
			SoilTemp2:             float32ToJSONNumber(r.SoilTemp2),
			SoilTemp3:             float32ToJSONNumber(r.SoilTemp3),
			SoilTemp4:             float32ToJSONNumber(r.SoilTemp4),
			LeafTemp1:             float32ToJSONNumber(r.LeafTemp1),
			LeafTemp2:             float32ToJSONNumber(r.LeafTemp2),
			LeafTemp3:             float32ToJSONNumber(r.LeafTemp3),
			LeafTemp4:             float32ToJSONNumber(r.LeafTemp4),
			OutHumidity:           float32ToJSONNumber(r.OutHumidity),
			ExtraHumidity1:        float32ToJSONNumber(r.ExtraHumidity1),
			ExtraHumidity2:        float32ToJSONNumber(r.ExtraHumidity2),
			ExtraHumidity3:        float32ToJSONNumber(r.ExtraHumidity3),
			ExtraHumidity4:        float32ToJSONNumber(r.ExtraHumidity4),
			ExtraHumidity5:        float32ToJSONNumber(r.ExtraHumidity5),
			ExtraHumidity6:        float32ToJSONNumber(r.ExtraHumidity6),
			ExtraHumidity7:        float32ToJSONNumber(r.ExtraHumidity7),
			OutsideHumidity:       float32ToJSONNumber(r.OutHumidity),
			RainRate:              float32ToJSONNumber(r.RainRate),
			RainIncremental:       float32ToJSONNumber(r.RainIncremental),
			PeriodRain:            float32ToJSONNumber(r.PeriodRain),
			SolarWatts:            float32ToJSONNumber(r.SolarWatts),
			PotentialSolarWatts:   float32ToJSONNumber(r.PotentialSolarWatts),
			SolarJoules:           float32ToJSONNumber(r.SolarJoules),
			UV:                    float32ToJSONNumber(r.UV),
			Radiation:             float32ToJSONNumber(r.Radiation),
			StormRain:             float32ToJSONNumber(r.StormRain),
			DayRain:               float32ToJSONNumber(r.DayRain),
			MonthRain:             float32ToJSONNumber(r.MonthRain),
			YearRain:              float32ToJSONNumber(r.YearRain),
			Barometer:             float32ToJSONNumber(r.Barometer),
			WindSpeed:             float32ToJSONNumber(r.WindSpeed),
			WindDirection:         float32ToJSONNumber(r.WindDir),
			CardinalDirection:     headingToCardinalDirection(r.WindDir),
			RainfallDay:           float32ToJSONNumber(r.DayRain),
			WindChill:             float32ToJSONNumber(r.WindChill),
			HeatIndex:             float32ToJSONNumber(r.HeatIndex),
			InsideTemperature:     float32ToJSONNumber(r.InTemp),
			InsideHumidity:        float32ToJSONNumber(r.InHumidity),
			ConsBatteryVoltage:    float32ToJSONNumber(r.ConsBatteryVoltage),
			StationBatteryVoltage: float32ToJSONNumber(r.StationBatteryVoltage),
			SnowDepth:             float32ToJSONNumber(mmToInches(r.SnowDepth)),
			SnowDistance:          float32ToJSONNumber(r.SnowDistance),
			ExtraFloat1:           float32ToJSONNumber(r.ExtraFloat1),
			ExtraFloat2:           float32ToJSONNumber(r.ExtraFloat2),
			ExtraFloat3:           float32ToJSONNumber(r.ExtraFloat3),
			ExtraFloat4:           float32ToJSONNumber(r.ExtraFloat4),
			ExtraFloat5:           float32ToJSONNumber(r.ExtraFloat5),
			ExtraFloat6:           float32ToJSONNumber(r.ExtraFloat6),
			ExtraFloat7:           float32ToJSONNumber(r.ExtraFloat7),
			ExtraFloat8:           float32ToJSONNumber(r.ExtraFloat8),
			ExtraFloat9:           float32ToJSONNumber(r.ExtraFloat9),
			ExtraFloat10:          float32ToJSONNumber(r.ExtraFloat10),
			ExtraText1:            r.ExtraText1,
			ExtraText2:            r.ExtraText2,
			ExtraText3:            r.ExtraText3,
			ExtraText4:            r.ExtraText4,
			ExtraText5:            r.ExtraText5,
			ExtraText6:            r.ExtraText6,
			ExtraText7:            r.ExtraText7,
			ExtraText8:            r.ExtraText8,
			ExtraText9:            r.ExtraText9,
			ExtraText10:           r.ExtraText10,
		})
	}

	return wr
}

// transformLatestReadings converts database readings to a single WeatherReading for JSON output
func (h *Handlers) transformLatestReadings(dbReadings *[]types.BucketReading) *WeatherReading {
	var latest types.BucketReading

	if len(*dbReadings) > 0 {
		latest = (*dbReadings)[0]
	} else {
		return &WeatherReading{}
	}

	reading := WeatherReading{
		StationName:           latest.StationName,
		StationType:           latest.StationType,
		ReadingTimestamp:      latest.Timestamp.UnixMilli(),
		OutsideTemperature:    float32ToJSONNumber(latest.OutTemp),
		ExtraTemp1:            float32ToJSONNumber(latest.ExtraTemp1),
		ExtraTemp2:            float32ToJSONNumber(latest.ExtraTemp2),
		ExtraTemp3:            float32ToJSONNumber(latest.ExtraTemp3),
		ExtraTemp4:            float32ToJSONNumber(latest.ExtraTemp4),
		ExtraTemp5:            float32ToJSONNumber(latest.ExtraTemp5),
		ExtraTemp6:            float32ToJSONNumber(latest.ExtraTemp6),
		ExtraTemp7:            float32ToJSONNumber(latest.ExtraTemp7),
		SoilTemp1:             float32ToJSONNumber(latest.SoilTemp1),
		SoilTemp2:             float32ToJSONNumber(latest.SoilTemp2),
		SoilTemp3:             float32ToJSONNumber(latest.SoilTemp3),
		SoilTemp4:             float32ToJSONNumber(latest.SoilTemp4),
		LeafTemp1:             float32ToJSONNumber(latest.LeafTemp1),
		LeafTemp2:             float32ToJSONNumber(latest.LeafTemp2),
		LeafTemp3:             float32ToJSONNumber(latest.LeafTemp3),
		LeafTemp4:             float32ToJSONNumber(latest.LeafTemp4),
		OutHumidity:           float32ToJSONNumber(latest.OutHumidity),
		ExtraHumidity1:        float32ToJSONNumber(latest.ExtraHumidity1),
		ExtraHumidity2:        float32ToJSONNumber(latest.ExtraHumidity2),
		ExtraHumidity3:        float32ToJSONNumber(latest.ExtraHumidity3),
		ExtraHumidity4:        float32ToJSONNumber(latest.ExtraHumidity4),
		ExtraHumidity5:        float32ToJSONNumber(latest.ExtraHumidity5),
		ExtraHumidity6:        float32ToJSONNumber(latest.ExtraHumidity6),
		ExtraHumidity7:        float32ToJSONNumber(latest.ExtraHumidity7),
		OutsideHumidity:       float32ToJSONNumber(latest.OutHumidity),
		RainRate:              float32ToJSONNumber(latest.RainRate),
		RainIncremental:       float32ToJSONNumber(latest.RainIncremental),
		PeriodRain:            float32ToJSONNumber(latest.PeriodRain),
		SolarWatts:            float32ToJSONNumber(latest.SolarWatts),
		PotentialSolarWatts:   float32ToJSONNumber(latest.PotentialSolarWatts),
		SolarJoules:           float32ToJSONNumber(latest.SolarJoules),
		UV:                    float32ToJSONNumber(latest.UV),
		Radiation:             float32ToJSONNumber(latest.Radiation),
		StormRain:             float32ToJSONNumber(latest.StormRain),
		DayRain:               float32ToJSONNumber(latest.DayRain),
		MonthRain:             float32ToJSONNumber(latest.MonthRain),
		YearRain:              float32ToJSONNumber(latest.YearRain),
		Barometer:             float32ToJSONNumber(latest.Barometer),
		WindSpeed:             float32ToJSONNumber(latest.WindSpeed),
		WindDirection:         float32ToJSONNumber(latest.WindDir),
		CardinalDirection:     headingToCardinalDirection(latest.WindDir),
		RainfallDay:           float32ToJSONNumber(latest.DayRain),
		WindChill:             float32ToJSONNumber(latest.WindChill),
		HeatIndex:             float32ToJSONNumber(latest.HeatIndex),
		InsideTemperature:     float32ToJSONNumber(latest.InTemp),
		InsideHumidity:        float32ToJSONNumber(latest.InHumidity),
		ConsBatteryVoltage:    float32ToJSONNumber(latest.ConsBatteryVoltage),
		StationBatteryVoltage: float32ToJSONNumber(latest.StationBatteryVoltage),
		SnowDepth:             float32ToJSONNumber(latest.SnowDepth),
		SnowDistance:          float32ToJSONNumber(latest.SnowDistance),
		ExtraFloat1:           float32ToJSONNumber(latest.ExtraFloat1),
		ExtraFloat2:           float32ToJSONNumber(latest.ExtraFloat2),
		ExtraFloat3:           float32ToJSONNumber(latest.ExtraFloat3),
		ExtraFloat4:           float32ToJSONNumber(latest.ExtraFloat4),
		ExtraFloat5:           float32ToJSONNumber(latest.ExtraFloat5),
		ExtraFloat6:           float32ToJSONNumber(latest.ExtraFloat6),
		ExtraFloat7:           float32ToJSONNumber(latest.ExtraFloat7),
		ExtraFloat8:           float32ToJSONNumber(latest.ExtraFloat8),
		ExtraFloat9:           float32ToJSONNumber(latest.ExtraFloat9),
		ExtraFloat10:          float32ToJSONNumber(latest.ExtraFloat10),
		ExtraText1:            latest.ExtraText1,
		ExtraText2:            latest.ExtraText2,
		ExtraText3:            latest.ExtraText3,
		ExtraText4:            latest.ExtraText4,
		ExtraText5:            latest.ExtraText5,
		ExtraText6:            latest.ExtraText6,
		ExtraText7:            latest.ExtraText7,
		ExtraText8:            latest.ExtraText8,
		ExtraText9:            latest.ExtraText9,
		ExtraText10:           latest.ExtraText10,
	}
	return &reading
}
