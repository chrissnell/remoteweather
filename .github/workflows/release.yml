name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  darwin-builds:
    name: Build macOS/Darwin binaries (AMD64 & ARM64)
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Build Darwin AMD64 and ARM64 binaries with CGO
        run: |
          mkdir -p dist
          echo "Building Darwin AMD64..."
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build \
            -ldflags="-s -w -X github.com/chrissnell/remoteweather/internal/constants.Version=${{ github.ref_name }}" \
            -o dist/remoteweather_darwin_amd64/remoteweather \
            ./cmd/remoteweather
          echo "Building Darwin ARM64..."
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build \
            -ldflags="-s -w -X github.com/chrissnell/remoteweather/internal/constants.Version=${{ github.ref_name }}" \
            -o dist/remoteweather_darwin_arm64/remoteweather \
            ./cmd/remoteweather

      - name: Create Darwin archives
        run: |
          cd dist
          tar czf remoteweather_${{ github.ref_name }}_darwin_amd64.tar.gz -C remoteweather_darwin_amd64 remoteweather
          tar czf remoteweather_${{ github.ref_name }}_darwin_arm64.tar.gz -C remoteweather_darwin_arm64 remoteweather

      - name: Upload Darwin archives
        uses: actions/upload-artifact@v4
        with:
          name: darwin-archives
          path: dist/*.tar.gz
          retention-days: 1

  release:
    name: Build Linux/Windows binaries and create release
    runs-on: ubuntu-latest
    needs: darwin-builds
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go environment
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install ARM cross-compilation toolchains for Raspberry Pi builds
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf \
            gcc-arm-linux-gnueabi g++-arm-linux-gnueabi \
            gcc-mingw-w64-x86-64

      - name: Download Darwin archives
        uses: actions/download-artifact@v4
        with:
          name: darwin-archives
          path: ./darwin-archives/

      - name: Prepare Darwin archives for release
        run: |
          # Move Darwin archives to release-assets directory
          mkdir -p release-assets
          mv ./darwin-archives/* release-assets/
          rm -rf ./darwin-archives
          # Add to .gitignore to keep git clean
          echo "release-assets/" >> .gitignore

      - name: Setup QEMU for multi-arch Docker builds
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and release all platforms (Linux, Windows, Docker)
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}